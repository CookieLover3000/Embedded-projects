
Opdracht2D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ce  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e4  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f7  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUsart>:
 */ 

#include <avr/io.h>

void initUsart(){
		UCSR0A = 0;
  96:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
		UCSR0B = (1 << TXEN0) | (1 << RXEN0); // Enable de USART Transmitter and Receiver
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		//	UCSR0C = (1 << UCSZ01) & ~(1 << UCSZ00);
		UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		UBRR0H=00;
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L=103; //baudrade 9600 bij
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b0:	08 95       	ret

000000b2 <writeChar>:
		//	UCSR0C = (1 << UPM01);
}

void writeChar(char x) {
	while (~UCSR0A & (1 << UDRE0));
  b2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b6:	95 ff       	sbrs	r25, 5
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <writeChar>
	UDR0 = x;
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  be:	08 95       	ret

000000c0 <writeString>:
}

void writeString(char st[]) {
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <writeString+0x12>
		writeChar( st[i] );
  cc:	0e 94 59 00 	call	0xb2	; 0xb2 <writeChar>
	while (~UCSR0A & (1 << UDRE0));
	UDR0 = x;
}

void writeString(char st[]) {
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
  d0:	cf 5f       	subi	r28, 0xFF	; 255
  d2:	f8 01       	movw	r30, r16
  d4:	ec 0f       	add	r30, r28
  d6:	f1 1d       	adc	r31, r1
  d8:	80 81       	ld	r24, Z
  da:	81 11       	cpse	r24, r1
  dc:	f7 cf       	rjmp	.-18     	; 0xcc <writeString+0xc>
		writeChar( st[i] );
	}
}
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	08 95       	ret

000000e6 <readChar>:

char readChar(){
	while (~UCSR0A & (1 << RXC0));
  e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ea:	88 23       	and	r24, r24
  ec:	e4 f7       	brge	.-8      	; 0xe6 <readChar>
		return UDR0;
  ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  f2:	08 95       	ret

000000f4 <zetLedB0_B3>:

zetLedB0_B3(char y){
	if (y >= '0' && y <= '9')
  f4:	90 ed       	ldi	r25, 0xD0	; 208
  f6:	98 0f       	add	r25, r24
  f8:	9a 30       	cpi	r25, 0x0A	; 10
  fa:	08 f4       	brcc	.+2      	; 0xfe <zetLedB0_B3+0xa>
		PORTB = y - '0';
  fc:	95 b9       	out	0x05, r25	; 5
	if (y >= 'A' && y <= 'F')
  fe:	9f eb       	ldi	r25, 0xBF	; 191
 100:	98 0f       	add	r25, r24
 102:	96 30       	cpi	r25, 0x06	; 6
 104:	18 f4       	brcc	.+6      	; 0x10c <zetLedB0_B3+0x18>
		PORTB = y - 'A' + 10;
 106:	99 ec       	ldi	r25, 0xC9	; 201
 108:	98 0f       	add	r25, r24
 10a:	95 b9       	out	0x05, r25	; 5
	if (y >= 'a' && y <= 'f' )
 10c:	9f e9       	ldi	r25, 0x9F	; 159
 10e:	98 0f       	add	r25, r24
 110:	96 30       	cpi	r25, 0x06	; 6
 112:	10 f4       	brcc	.+4      	; 0x118 <zetLedB0_B3+0x24>
		PORTB = y - 'a' + 10;
 114:	87 55       	subi	r24, 0x57	; 87
 116:	85 b9       	out	0x05, r24	; 5
}
 118:	08 95       	ret

0000011a <main>:

int main(void)
{
	DDRB = 0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	84 b9       	out	0x04, r24	; 4
	char x;
	initUsart();
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <initUsart>
    
    while (1) 
    {
		writeString("Zet een HEX waarde op de pinnen B0...B3\n\r");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 60 00 	call	0xc0	; 0xc0 <writeString>
		x = readChar();
 12a:	0e 94 73 00 	call	0xe6	; 0xe6 <readChar>
 12e:	c8 2f       	mov	r28, r24
		zetLedB0_B3(x);
 130:	0e 94 7a 00 	call	0xf4	; 0xf4 <zetLedB0_B3>
		writeChar(x);
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 59 00 	call	0xb2	; 0xb2 <writeChar>
		writeString("\n\r");
 13a:	87 e2       	ldi	r24, 0x27	; 39
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 60 00 	call	0xc0	; 0xc0 <writeString>
 142:	ef cf       	rjmp	.-34     	; 0x122 <main+0x8>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
