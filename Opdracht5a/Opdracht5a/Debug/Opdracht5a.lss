
Opdracht5a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000765  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068b  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <zetLedAan>:
void initBlink() {
	DDRB = 0xFF;
	PORTB = 0xFF;
}
void zetLedAan(uint8_t b) {
	PORTB |= 1 << b;
  80:	95 b1       	in	r25, 0x05	; 5
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <zetLedAan+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <zetLedAan+0x8>
  90:	29 2b       	or	r18, r25
  92:	25 b9       	out	0x05, r18	; 5
  94:	08 95       	ret

00000096 <zetLedUit>:
}
void zetLedUit(uint8_t b) {
	PORTB &= ~(1 << b);
  96:	95 b1       	in	r25, 0x05	; 5
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <zetLedUit+0xc>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	8a 95       	dec	r24
  a4:	e2 f7       	brpl	.-8      	; 0x9e <zetLedUit+0x8>
  a6:	20 95       	com	r18
  a8:	29 23       	and	r18, r25
  aa:	25 b9       	out	0x05, r18	; 5
  ac:	08 95       	ret

000000ae <initBlinkTimer>:
}

void initBlinkTimer() {
	TCCR1B |= 1 << WGM12 | 1 << CS10 | 1 << CS12;
  ae:	e1 e8       	ldi	r30, 0x81	; 129
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8d 60       	ori	r24, 0x0D	; 13
  b6:	80 83       	st	Z, r24
	TCCR1A |= 1 << COM1A0;
  b8:	e0 e8       	ldi	r30, 0x80	; 128
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <delay>:
}

void delay(){
	for(int i = 0; i < 125; i++){
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <delay+0x10>
		TIFR1 = 1 << TOV1;
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	26 bb       	out	0x16, r18	; 22
		while(!(TIFR1 & 1 << TOV1));
  ce:	b0 9b       	sbis	0x16, 0	; 22
  d0:	fe cf       	rjmp	.-4      	; 0xce <delay+0xa>
	TCCR1B |= 1 << WGM12 | 1 << CS10 | 1 << CS12;
	TCCR1A |= 1 << COM1A0;
}

void delay(){
	for(int i = 0; i < 125; i++){
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	8d 37       	cpi	r24, 0x7D	; 125
  d6:	91 05       	cpc	r25, r1
  d8:	c4 f3       	brlt	.-16     	; 0xca <delay+0x6>
		TIFR1 = 1 << TOV1;
		while(!(TIFR1 & 1 << TOV1));
	}
  da:	08 95       	ret

000000dc <main>:
void initBlinkTimer();
void delay();

int main(void)
{
	initBlinkTimer();
  dc:	0e 94 57 00 	call	0xae	; 0xae <initBlinkTimer>
	while (1)
	{
		zetLedAan(1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 40 00 	call	0x80	; 0x80 <zetLedAan>
		delay();
  e6:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
		zetLedUit(0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <zetLedUit>
		delay();
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
  f4:	f5 cf       	rjmp	.-22     	; 0xe0 <main+0x4>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
