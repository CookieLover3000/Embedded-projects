
Opdracht3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000847  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00000b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034d  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  9e:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
}


void init()
{
	DDRB=0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	08 95       	ret

000000ac <initExtInt>:
}
void initExtInt()
{
	DDRD &= ~(1 << PORTD3);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD3);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	8b b9       	out	0x0b, r24	; 11
	
	EICRA = (1 << ISC11);
  b8:	88 e0       	ldi	r24, 0x08	; 8
  ba:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1 << INT1);
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	8d bb       	out	0x1d, r24	; 29
	sei();
  c2:	78 94       	sei
  c4:	08 95       	ret

000000c6 <__vector_2>:
}
ISR(INT1_vect) 
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <__vector_2+0x16>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__vector_2+0x20>
  e6:	00 00       	nop
	_delay_ms(25);
	if(~PIND & (1 << PORTD3))	
  e8:	4b 99       	sbic	0x09, 3	; 9
  ea:	07 c0       	rjmp	.+14     	; 0xfa <__vector_2+0x34>
		i = !i;	
  ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	91 11       	cpse	r25, r1
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <tellen>:
void tellen()
{
	if(teller > 0)
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	88 23       	and	r24, r24
 110:	29 f0       	breq	.+10     	; 0x11c <tellen+0x12>
		teller -= 1;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	81 50       	subi	r24, 0x01	; 1
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	08 95       	ret

0000011e <blinkLed>:
}
void blinkLed()
{ // 1hz is 1000ms
	if(i){
 11e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 122:	88 23       	and	r24, r24
 124:	d1 f0       	breq	.+52     	; 0x15a <blinkLed+0x3c>
		PORTB |= (1 << PORTB4);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	85 b9       	out	0x05, r24	; 5
		tellen();
 12c:	0e 94 85 00 	call	0x10a	; 0x10a <tellen>
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <blinkLed+0x18>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <blinkLed+0x22>
 140:	00 00       	nop
		_delay_ms(500); 
		PORTB &= ~(1 << PORTB4);
 142:	85 b1       	in	r24, 0x05	; 5
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	85 b9       	out	0x05, r24	; 5
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 e6       	ldi	r24, 0x69	; 105
 14c:	98 e1       	ldi	r25, 0x18	; 24
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <blinkLed+0x30>
 156:	00 c0       	rjmp	.+0      	; 0x158 <blinkLed+0x3a>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <main>:
		_delay_ms(500);
	}
}
int main(void)
{
	init();
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	initExtInt();
 160:	0e 94 56 00 	call	0xac	; 0xac <initExtInt>
	while(1)
	{
		PORTB = teller;
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	85 b9       	out	0x05, r24	; 5
		if(teller > 0)
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	88 23       	and	r24, r24
 170:	c9 f3       	breq	.-14     	; 0x164 <main+0x8>
			blinkLed();
 172:	0e 94 8f 00 	call	0x11e	; 0x11e <blinkLed>
 176:	f6 cf       	rjmp	.-20     	; 0x164 <main+0x8>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
