
Opdracht6ABC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c0  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e3  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  78:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initTimer2FastPWM>:
void initTimer1Fast10PWM()
{
	DDRB = (1 << PORTB1);
	TCCR1A = (1 << COM1A1) | (1 << WGM10) | (1 << WGM11);
	TCCR1B = (1 << CS10)| (1 <<CS11) |(1 << WGM12);
	OCR1A = 512;
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	8a b9       	out	0x0a, r24	; 10
  84:	83 e2       	ldi	r24, 0x23	; 35
  86:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  90:	08 95       	ret

00000092 <initTimer1FastPWM_ICR1>:
}

void initTimer1FastPWM_ICR1()
{
		DDRB = (1 << PORTB1);
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	84 b9       	out	0x04, r24	; 4
		TCCR1A = (1 << COM1A1) | (1 << WGM10) | (1 << WGM11);
  96:	83 e8       	ldi	r24, 0x83	; 131
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = (1 << CS10)| (1 <<CS11) |(1 << WGM12);
  9c:	8b e0       	ldi	r24, 0x0B	; 11
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		OCR1A = 512;
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		ICR1 = 1023;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ba:	08 95       	ret

000000bc <initADC>:
}

void initADC()
{
	ADMUX |= (1 << REFS0) | (0 << ADLAR) | (1 << MUX2); /* reference voltage on AVCC */
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	84 64       	ori	r24, 0x44	; 68
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); /* ADC clock prescaler /128 */
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	87 60       	ori	r24, 0x07	; 7
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); /* enable ADC */
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <dimLed>:
}

void dimLed(uint8_t dutycycle)
{
	OCR2B = dutycycle;
  d8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  dc:	08 95       	ret

000000de <leesADwaarde>:
}

uint16_t leesADwaarde(uint8_t analoogInput)
{
	uint16_t a;
	ADMUX &= 0xF0;
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	90 83       	st	Z, r25
	ADMUX |= analoogInput;
  e8:	90 81       	ld	r25, Z
  ea:	89 2b       	or	r24, r25
  ec:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 65       	ori	r24, 0x50	; 80
  f6:	80 83       	st	Z, r24
	while(~ADCSRA & (1 << ADIF));
  f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	84 ff       	sbrs	r24, 4
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <leesADwaarde+0x1a>
	a = ADC; /* read ADC in */
 100:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 104:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return a;
}
 108:	08 95       	ret

0000010a <main>:
uint16_t leesADwaarde(uint8_t);

int main(void)
{
//	uint8_t periodetijden[] = {1,2,3,4,5}; // prescalers
	initTimer1FastPWM_ICR1();	// initialiseer timer1 op fast PWM
 10a:	0e 94 49 00 	call	0x92	; 0x92 <initTimer1FastPWM_ICR1>
	initTimer2FastPWM();	// initialiseer timer2 op fast PWM
 10e:	0e 94 40 00 	call	0x80	; 0x80 <initTimer2FastPWM>
	initADC();
 112:	0e 94 5e 00 	call	0xbc	; 0xbc <initADC>
//	dimLed(255);			// Duty cycle van PWM = 1
//	_delay_ms(1000);		// wacht 1 seconde
	
    while (1) 
    {
		long adwaarde=leesADwaarde(5); //long i.v.m omrekenen
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	0e 94 6f 00 	call	0xde	; 0xde <leesADwaarde>
		adwaarde=adwaarde*255/1023;
 11c:	9c 01       	movw	r18, r24
 11e:	af ef       	ldi	r26, 0xFF	; 255
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	0e 94 bc 00 	call	0x178	; 0x178 <__umulhisi3>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	33 e0       	ldi	r19, 0x03	; 3
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	0e 94 9d 00 	call	0x13a	; 0x13a <__divmodsi4>
 132:	82 2f       	mov	r24, r18
		dimLed(adwaarde);
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <dimLed>
 138:	ee cf       	rjmp	.-36     	; 0x116 <main+0xc>

0000013a <__divmodsi4>:
 13a:	05 2e       	mov	r0, r21
 13c:	97 fb       	bst	r25, 7
 13e:	1e f4       	brtc	.+6      	; 0x146 <__divmodsi4+0xc>
 140:	00 94       	com	r0
 142:	0e 94 b4 00 	call	0x168	; 0x168 <__negsi2>
 146:	57 fd       	sbrc	r21, 7
 148:	07 d0       	rcall	.+14     	; 0x158 <__divmodsi4_neg2>
 14a:	0e 94 cb 00 	call	0x196	; 0x196 <__udivmodsi4>
 14e:	07 fc       	sbrc	r0, 7
 150:	03 d0       	rcall	.+6      	; 0x158 <__divmodsi4_neg2>
 152:	4e f4       	brtc	.+18     	; 0x166 <__divmodsi4_exit>
 154:	0c 94 b4 00 	jmp	0x168	; 0x168 <__negsi2>

00000158 <__divmodsi4_neg2>:
 158:	50 95       	com	r21
 15a:	40 95       	com	r20
 15c:	30 95       	com	r19
 15e:	21 95       	neg	r18
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	4f 4f       	sbci	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255

00000166 <__divmodsi4_exit>:
 166:	08 95       	ret

00000168 <__negsi2>:
 168:	90 95       	com	r25
 16a:	80 95       	com	r24
 16c:	70 95       	com	r23
 16e:	61 95       	neg	r22
 170:	7f 4f       	sbci	r23, 0xFF	; 255
 172:	8f 4f       	sbci	r24, 0xFF	; 255
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	08 95       	ret

00000178 <__umulhisi3>:
 178:	a2 9f       	mul	r26, r18
 17a:	b0 01       	movw	r22, r0
 17c:	b3 9f       	mul	r27, r19
 17e:	c0 01       	movw	r24, r0
 180:	a3 9f       	mul	r26, r19
 182:	70 0d       	add	r23, r0
 184:	81 1d       	adc	r24, r1
 186:	11 24       	eor	r1, r1
 188:	91 1d       	adc	r25, r1
 18a:	b2 9f       	mul	r27, r18
 18c:	70 0d       	add	r23, r0
 18e:	81 1d       	adc	r24, r1
 190:	11 24       	eor	r1, r1
 192:	91 1d       	adc	r25, r1
 194:	08 95       	ret

00000196 <__udivmodsi4>:
 196:	a1 e2       	ldi	r26, 0x21	; 33
 198:	1a 2e       	mov	r1, r26
 19a:	aa 1b       	sub	r26, r26
 19c:	bb 1b       	sub	r27, r27
 19e:	fd 01       	movw	r30, r26
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <__udivmodsi4_ep>

000001a2 <__udivmodsi4_loop>:
 1a2:	aa 1f       	adc	r26, r26
 1a4:	bb 1f       	adc	r27, r27
 1a6:	ee 1f       	adc	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	a2 17       	cp	r26, r18
 1ac:	b3 07       	cpc	r27, r19
 1ae:	e4 07       	cpc	r30, r20
 1b0:	f5 07       	cpc	r31, r21
 1b2:	20 f0       	brcs	.+8      	; 0x1bc <__udivmodsi4_ep>
 1b4:	a2 1b       	sub	r26, r18
 1b6:	b3 0b       	sbc	r27, r19
 1b8:	e4 0b       	sbc	r30, r20
 1ba:	f5 0b       	sbc	r31, r21

000001bc <__udivmodsi4_ep>:
 1bc:	66 1f       	adc	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	1a 94       	dec	r1
 1c6:	69 f7       	brne	.-38     	; 0x1a2 <__udivmodsi4_loop>
 1c8:	60 95       	com	r22
 1ca:	70 95       	com	r23
 1cc:	80 95       	com	r24
 1ce:	90 95       	com	r25
 1d0:	9b 01       	movw	r18, r22
 1d2:	ac 01       	movw	r20, r24
 1d4:	bd 01       	movw	r22, r26
 1d6:	cf 01       	movw	r24, r30
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
