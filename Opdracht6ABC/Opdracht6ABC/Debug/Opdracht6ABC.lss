
Opdracht6ABC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cc  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000753  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000379  00000000  00000000  000012c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013e  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initTimer2FastPWM>:
	ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
	while(~ADCSRA & (1 << ADIF));
	a = ADC; /* read ADC in */
	
	return a;
}
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	83 e2       	ldi	r24, 0x23	; 35
  9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  a6:	08 95       	ret

000000a8 <initTimer1Fast10PWM>:
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	83 e8       	ldi	r24, 0x83	; 131
  ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  b2:	8b e0       	ldi	r24, 0x0B	; 11
  b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  c4:	08 95       	ret

000000c6 <dimLed>:
  c6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  ca:	08 95       	ret

000000cc <pasPeriodeTijdTimer1Aan>:

void pasPeriodeTijdTimer1Aan(uint8_t prescalers)
{
	TCCR1B &= 0x10;
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	90 71       	andi	r25, 0x10	; 16
  d4:	90 83       	st	Z, r25
	TCCR1B |= prescalers;
  d6:	90 81       	ld	r25, Z
  d8:	89 2b       	or	r24, r25
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <main>:
void pasPeriodeTijdTimer1Aan(uint8_t);

uint16_t leesADwaarde(uint8_t);

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <main+0x8>
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t periodetijden[] = {1,2,3,4,5}; // prescalers
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x18>
	initTimer1Fast10PWM();	// initialiseer timer1 op fast PWM
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <initTimer1Fast10PWM>
	initTimer2FastPWM();	// initialiseer timer2 op fast PWM
 102:	0e 94 4b 00 	call	0x96	; 0x96 <initTimer2FastPWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x2e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x38>
 116:	00 00       	nop
//	initADC();
	_delay_ms(1000);	// wacht 1 seconde
	dimLed(255);		// Duty cycle van PWM = 1
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	0e 94 63 00 	call	0xc6	; 0xc6 <dimLed>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	83 ed       	ldi	r24, 0xD3	; 211
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x50>
 12e:	00 00       	nop
    while (1) 
    {
//		long adwaarde=leesADwaarde(5); //long i.v.m omrekenen
//		adwaarde=adwaarde*255/1023;
//		dimLed(adwaarde);
		for(int i=0;i<5;i++)
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	14 c0       	rjmp	.+40     	; 0x15e <main+0x80>
		{
			pasPeriodeTijdTimer1Aan(periodetijden[i]); // functie past de frequentie aan f=1/periodetijd
 136:	e1 e0       	ldi	r30, 0x01	; 1
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ec 0f       	add	r30, r28
 13c:	fd 1f       	adc	r31, r29
 13e:	e0 0f       	add	r30, r16
 140:	f1 1f       	adc	r31, r17
 142:	80 81       	ld	r24, Z
 144:	0e 94 66 00 	call	0xcc	; 0xcc <pasPeriodeTijdTimer1Aan>
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	83 ed       	ldi	r24, 0xD3	; 211
 14c:	90 e3       	ldi	r25, 0x30	; 48
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x70>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x7a>
 158:	00 00       	nop
    while (1) 
    {
//		long adwaarde=leesADwaarde(5); //long i.v.m omrekenen
//		adwaarde=adwaarde*255/1023;
//		dimLed(adwaarde);
		for(int i=0;i<5;i++)
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	05 30       	cpi	r16, 0x05	; 5
 160:	11 05       	cpc	r17, r1
 162:	4c f3       	brlt	.-46     	; 0x136 <main+0x58>
 164:	e5 cf       	rjmp	.-54     	; 0x130 <main+0x52>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
