
Opdracht2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000915  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ca  00000000  00000000  00000bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  00001acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 77 00 	call	0xee	; 0xee <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <writeChar>:
	itoa(i,buffer,10);
	writeString(buffer);
}

void writeChar(char x) {
	while (~UCSR0A & (1 << UDRE0));
  80:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  84:	95 ff       	sbrs	r25, 5
  86:	fc cf       	rjmp	.-8      	; 0x80 <writeChar>
	UDR0 = x;
  88:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  8c:	08 95       	ret

0000008e <writeString>:
}

void writeString(char st[]) {
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	03 c0       	rjmp	.+6      	; 0xa0 <writeString+0x12>
		writeChar( st[i] );
  9a:	0e 94 40 00 	call	0x80	; 0x80 <writeChar>
	while (~UCSR0A & (1 << UDRE0));
	UDR0 = x;
}

void writeString(char st[]) {
	for(uint8_t i = 0 ; st[i] != 0 ; i++) {
  9e:	cf 5f       	subi	r28, 0xFF	; 255
  a0:	f8 01       	movw	r30, r16
  a2:	ec 0f       	add	r30, r28
  a4:	f1 1d       	adc	r31, r1
  a6:	80 81       	ld	r24, Z
  a8:	81 11       	cpse	r24, r1
  aa:	f7 cf       	rjmp	.-18     	; 0x9a <writeString+0xc>
		writeChar( st[i] );
	}
}
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
  b0:	0f 91       	pop	r16
  b2:	08 95       	ret

000000b4 <writeInt>:
#include <util/delay.h>
#include <stdlib.h>



void writeInt(int i) {
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	28 97       	sbiw	r28, 0x08	; 8
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  c8:	4a e0       	ldi	r20, 0x0A	; 10
  ca:	be 01       	movw	r22, r28
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	0e 94 97 00 	call	0x12e	; 0x12e <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10);
	writeString(buffer);
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	0e 94 47 00 	call	0x8e	; 0x8e <writeString>
}
  dc:	28 96       	adiw	r28, 0x08	; 8
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <main>:



int main(void) {

	UCSR0A = 0;
  ee:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << TXEN0); // Enable de USART Transmitter
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
//	UCSR0C = (1 << UCSZ01) & ~(1 << UCSZ00); 
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H=00;
  fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103; //baudrade 9600 bij
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
while(1) {int schrijf = 1234;
	
	
	//char schrijf[5] = {'1' , '2' , '3' , '4' }; 
		
		writeInt(schrijf);
 108:	82 ed       	ldi	r24, 0xD2	; 210
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeInt>

	for(uint8_t i=0;i<4;++i)
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0a c0       	rjmp	.+20     	; 0x128 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	34 e3       	ldi	r19, 0x34	; 52
 118:	9c e0       	ldi	r25, 0x0C	; 12
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x2c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x36>
 124:	00 00       	nop
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	a0 f3       	brcs	.-24     	; 0x114 <main+0x26>
 12c:	ed cf       	rjmp	.-38     	; 0x108 <main+0x1a>

0000012e <__itoa_ncheck>:
 12e:	bb 27       	eor	r27, r27
 130:	4a 30       	cpi	r20, 0x0A	; 10
 132:	31 f4       	brne	.+12     	; 0x140 <__itoa_ncheck+0x12>
 134:	99 23       	and	r25, r25
 136:	22 f4       	brpl	.+8      	; 0x140 <__itoa_ncheck+0x12>
 138:	bd e2       	ldi	r27, 0x2D	; 45
 13a:	90 95       	com	r25
 13c:	81 95       	neg	r24
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	0c 94 a3 00 	jmp	0x146	; 0x146 <__utoa_common>

00000144 <__utoa_ncheck>:
 144:	bb 27       	eor	r27, r27

00000146 <__utoa_common>:
 146:	fb 01       	movw	r30, r22
 148:	55 27       	eor	r21, r21
 14a:	aa 27       	eor	r26, r26
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	aa 1f       	adc	r26, r26
 152:	a4 17       	cp	r26, r20
 154:	10 f0       	brcs	.+4      	; 0x15a <__utoa_common+0x14>
 156:	a4 1b       	sub	r26, r20
 158:	83 95       	inc	r24
 15a:	50 51       	subi	r21, 0x10	; 16
 15c:	b9 f7       	brne	.-18     	; 0x14c <__utoa_common+0x6>
 15e:	a0 5d       	subi	r26, 0xD0	; 208
 160:	aa 33       	cpi	r26, 0x3A	; 58
 162:	08 f0       	brcs	.+2      	; 0x166 <__utoa_common+0x20>
 164:	a9 5d       	subi	r26, 0xD9	; 217
 166:	a1 93       	st	Z+, r26
 168:	00 97       	sbiw	r24, 0x00	; 0
 16a:	79 f7       	brne	.-34     	; 0x14a <__utoa_common+0x4>
 16c:	b1 11       	cpse	r27, r1
 16e:	b1 93       	st	Z+, r27
 170:	11 92       	st	Z+, r1
 172:	cb 01       	movw	r24, r22
 174:	0c 94 bc 00 	jmp	0x178	; 0x178 <strrev>

00000178 <strrev>:
 178:	dc 01       	movw	r26, r24
 17a:	fc 01       	movw	r30, r24
 17c:	67 2f       	mov	r22, r23
 17e:	71 91       	ld	r23, Z+
 180:	77 23       	and	r23, r23
 182:	e1 f7       	brne	.-8      	; 0x17c <strrev+0x4>
 184:	32 97       	sbiw	r30, 0x02	; 2
 186:	04 c0       	rjmp	.+8      	; 0x190 <strrev+0x18>
 188:	7c 91       	ld	r23, X
 18a:	6d 93       	st	X+, r22
 18c:	70 83       	st	Z, r23
 18e:	62 91       	ld	r22, -Z
 190:	ae 17       	cp	r26, r30
 192:	bf 07       	cpc	r27, r31
 194:	c8 f3       	brcs	.-14     	; 0x188 <strrev+0x10>
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
