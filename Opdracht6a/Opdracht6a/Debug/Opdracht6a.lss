
Opdracht6a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082f  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e9  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initTimer2FastPWM>:
	return 0;
}

void initTimer2FastPWM()
{
	DDRD = (1 << PORTD3);
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	8a b9       	out	0x0a, r24	; 10
	TCCR2A = (1 << COM2B1) |(1 << WGM20) | (1 << WGM21);
  84:	83 e2       	ldi	r24, 0x23	; 35
  86:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS20); // prescaler
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  90:	08 95       	ret

00000092 <dimLed>:
}
void dimLed(uint8_t dutycycle)
{
	OCR2B = ((dutycycle+1)/256*100);
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	9c 01       	movw	r18, r24
  98:	12 f4       	brpl	.+4      	; 0x9e <dimLed+0xc>
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	84 e6       	ldi	r24, 0x64	; 100
  a0:	83 9f       	mul	r24, r19
  a2:	80 2d       	mov	r24, r0
  a4:	11 24       	eor	r1, r1
  a6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  aa:	08 95       	ret

000000ac <main>:
void initTimer2FastPWM();
void dimLed(uint8_t);

int main(void)
{
	initTimer2FastPWM();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <initTimer2FastPWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0xa>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x14>
  c0:	00 00       	nop
	_delay_ms(1000);	// wacht 1 seconde
	dimLed(255);		// Duty cycle van PWM = 1
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	0e 94 49 00 	call	0x92	; 0x92 <dimLed>
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x22>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x2c>
  d8:	00 00       	nop
	_delay_ms(1000);	// wacht 1 seconde
	
    while (1) 
    {
		dimLed(10);			// de duty cycle van PWM is (10+1)/256 * 100 = 4.3
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 49 00 	call	0x92	; 0x92 <dimLed>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 e6       	ldi	r24, 0x69	; 105
  e4:	98 e1       	ldi	r25, 0x18	; 24
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x3a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x44>
  f0:	00 00       	nop
		_delay_ms(500);		// wacht 0.5 seconde
		dimLed(220);			// de duty cycle van PWM = (220+1)/256*100 = 86.3
  f2:	8c ed       	ldi	r24, 0xDC	; 220
  f4:	0e 94 49 00 	call	0x92	; 0x92 <dimLed>
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x52>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x5c>
 108:	00 00       	nop
 10a:	e7 cf       	rjmp	.-50     	; 0xda <main+0x2e>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
