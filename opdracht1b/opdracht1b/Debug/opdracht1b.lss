
opdracht1b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a0  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dd  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dd  00000000  00000000  000010b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  00001785  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000182e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 84 00 	call	0x108	; 0x108 <main>
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initialisatie>:
#define F_CPU 16000000UL
#define TRUE 1
#define FALSE 0

void initialisatie(){
	DDRD  = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xff;
  84:	8b b9       	out	0x0b, r24	; 11
	DDRB  |= ((1 << PORTB0) | (1 << PORTB1));
  86:	84 b1       	in	r24, 0x04	; 4
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1 << PORTB0) | (1 << PORTB1));
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	85 b9       	out	0x05, r24	; 5
  92:	08 95       	ret

00000094 <zetLedAan>:
}

void zetLedAan(uint8_t n){
	PORTD |= (1 << n);
  94:	9b b1       	in	r25, 0x0b	; 11
  96:	48 2f       	mov	r20, r24
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	08 2e       	mov	r0, r24
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <zetLedAan+0x12>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <zetLedAan+0xe>
  aa:	29 2b       	or	r18, r25
  ac:	2b b9       	out	0x0b, r18	; 11
	
	
	if (n >= 8){
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	60 f0       	brcs	.+24     	; 0xca <zetLedAan+0x36>
		PORTB |= (1 << (n - 8));
  b2:	25 b1       	in	r18, 0x05	; 5
  b4:	48 50       	subi	r20, 0x08	; 8
  b6:	51 09       	sbc	r21, r1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <zetLedAan+0x2e>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	4a 95       	dec	r20
  c4:	e2 f7       	brpl	.-8      	; 0xbe <zetLedAan+0x2a>
  c6:	82 2b       	or	r24, r18
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	08 95       	ret

000000cc <zetLedUit>:
	}
}

void zetLedUit(uint8_t n){
		PORTD &= ~(1 << n);
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	48 2f       	mov	r20, r24
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	08 2e       	mov	r0, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <zetLedUit+0x12>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <zetLedUit+0xe>
  e2:	20 95       	com	r18
  e4:	29 23       	and	r18, r25
  e6:	2b b9       	out	0x0b, r18	; 11
		
		if (n >= 8){
  e8:	88 30       	cpi	r24, 0x08	; 8
  ea:	68 f0       	brcs	.+26     	; 0x106 <zetLedUit+0x3a>
			PORTB &= ~(1 << (n - 8));
  ec:	25 b1       	in	r18, 0x05	; 5
  ee:	48 50       	subi	r20, 0x08	; 8
  f0:	51 09       	sbc	r21, r1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <zetLedUit+0x30>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	4a 95       	dec	r20
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <zetLedUit+0x2c>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	85 b9       	out	0x05, r24	; 5
 106:	08 95       	ret

00000108 <main>:
}

int main(void)
{
	
	initialisatie();
 108:	0e 94 40 00 	call	0x80	; 0x80 <initialisatie>

	uint8_t a = 0;
 10c:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f e3       	ldi	r18, 0x3F	; 63
 110:	82 e4       	ldi	r24, 0x42	; 66
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0xc>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x16>
 11e:	00 00       	nop
	
	while (1) {
		_delay_ms(5000); // Hoe snel het looplicht gaat
		zetLedUit(a);
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 66 00 	call	0xcc	; 0xcc <zetLedUit>
		a++;
 126:	cf 5f       	subi	r28, 0xFF	; 255
		
		if (a == 10){
 128:	ca 30       	cpi	r28, 0x0A	; 10
 12a:	09 f4       	brne	.+2      	; 0x12e <main+0x26>
			a = 0;
 12c:	c0 e0       	ldi	r28, 0x00	; 0
		}
		zetLedAan(a);
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 4a 00 	call	0x94	; 0x94 <zetLedAan>
	}
 134:	ec cf       	rjmp	.-40     	; 0x10e <main+0x6>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
