
Ademhalingsmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000024e  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091f  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000785  00000000  00000000  00000caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000376  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000017ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000403  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bc  00000000  00000000  00001c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  8e:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initADC>:
}

void initADC()
{
	// Welke Voltage reference nodig (table 23-3)
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // Voltage Reference: AVcc witch external capacitator at AREF pin - Analog Channel = ADC5
  96:	85 e4       	ldi	r24, 0x45	; 69
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS2); // Prescaler 32
  9c:	85 e8       	ldi	r24, 0x85	; 133
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a2:	08 95       	ret

000000a4 <initUsart>:
}

void initUsart()
{
	UCSR0A = 0;
  a4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Enable de USART Transmitter */
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H=00;
  b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103; /* baudrade 9600 */
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	08 95       	ret

000000c0 <writeChar>:
}

void writeChar(char x)
{
	while (~UCSR0A & (1 << UDRE0));
  c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <writeChar>
	UDR0 = x;
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <writeString>:
}

void writeString(char st[])
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <writeString+0x12>
	writeChar(st[i]);
  da:	0e 94 60 00 	call	0xc0	; 0xc0 <writeChar>
	UDR0 = x;
}

void writeString(char st[])
{
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  de:	cf 5f       	subi	r28, 0xFF	; 255
  e0:	f8 01       	movw	r30, r16
  e2:	ec 0f       	add	r30, r28
  e4:	f1 1d       	adc	r31, r1
  e6:	80 81       	ld	r24, Z
  e8:	81 11       	cpse	r24, r1
  ea:	f7 cf       	rjmp	.-18     	; 0xda <writeString+0xc>
	writeChar(st[i]);
}
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <writeInt>:

void writeInt(int i)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	28 97       	sbiw	r28, 0x08	; 8
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	itoa(i,buffer,10);
 108:	4a e0       	ldi	r20, 0x0A	; 10
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	be 01       	movw	r22, r28
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	0e 94 e5 00 	call	0x1ca	; 0x1ca <itoa>
	writeString(buffer);
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <writeString>
}
 11e:	28 96       	adiw	r28, 0x08	; 8
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <leesADCwaarde>:

uint16_t leesADCwaarde()
{
	ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 65       	ori	r24, 0x50	; 80
 138:	80 83       	st	Z, r24
	while(~ADCSRA & (1 << ADIF));
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13e:	84 ff       	sbrs	r24, 4
 140:	fc cf       	rjmp	.-8      	; 0x13a <leesADCwaarde+0xa>
	uint16_t a = ADC;
 142:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 146:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	a %= 10;
 14a:	9a 01       	movw	r18, r20
 14c:	ad ec       	ldi	r26, 0xCD	; 205
 14e:	bc ec       	ldi	r27, 0xCC	; 204
 150:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__umulhisi3>
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	9c 01       	movw	r18, r24
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	82 0f       	add	r24, r18
 174:	93 1f       	adc	r25, r19
	return a;
}
 176:	9a 01       	movw	r18, r20
 178:	28 1b       	sub	r18, r24
 17a:	39 0b       	sbc	r19, r25
 17c:	c9 01       	movw	r24, r18
 17e:	08 95       	ret

00000180 <printUsart>:

void printUsart(uint16_t x)
{
	writeInt(x);
 180:	0e 94 7a 00 	call	0xf4	; 0xf4 <writeInt>
	writeString("\n\r");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 67 00 	call	0xce	; 0xce <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	83 e2       	ldi	r24, 0x23	; 35
 18e:	94 ef       	ldi	r25, 0xF4	; 244
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <printUsart+0x10>
 194:	00 c0       	rjmp	.+0      	; 0x196 <printUsart+0x16>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <main>:
uint16_t leesADCwaarde();
void printUsart(uint16_t a);

int main(void)
{
	initADC();
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <initADC>
	initUsart();
 19e:	0e 94 52 00 	call	0xa4	; 0xa4 <initUsart>
	uint16_t adcWaarde;
	
    while (1) 
    {
		adcWaarde = leesADCwaarde();
 1a2:	0e 94 98 00 	call	0x130	; 0x130 <leesADCwaarde>
		printUsart(adcWaarde);
 1a6:	0e 94 c0 00 	call	0x180	; 0x180 <printUsart>
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <main+0x8>

000001ac <__umulhisi3>:
 1ac:	a2 9f       	mul	r26, r18
 1ae:	b0 01       	movw	r22, r0
 1b0:	b3 9f       	mul	r27, r19
 1b2:	c0 01       	movw	r24, r0
 1b4:	a3 9f       	mul	r26, r19
 1b6:	70 0d       	add	r23, r0
 1b8:	81 1d       	adc	r24, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	91 1d       	adc	r25, r1
 1be:	b2 9f       	mul	r27, r18
 1c0:	70 0d       	add	r23, r0
 1c2:	81 1d       	adc	r24, r1
 1c4:	11 24       	eor	r1, r1
 1c6:	91 1d       	adc	r25, r1
 1c8:	08 95       	ret

000001ca <itoa>:
 1ca:	45 32       	cpi	r20, 0x25	; 37
 1cc:	51 05       	cpc	r21, r1
 1ce:	20 f4       	brcc	.+8      	; 0x1d8 <itoa+0xe>
 1d0:	42 30       	cpi	r20, 0x02	; 2
 1d2:	10 f0       	brcs	.+4      	; 0x1d8 <itoa+0xe>
 1d4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__itoa_ncheck>
 1d8:	fb 01       	movw	r30, r22
 1da:	10 82       	st	Z, r1
 1dc:	cb 01       	movw	r24, r22
 1de:	08 95       	ret

000001e0 <__itoa_ncheck>:
 1e0:	bb 27       	eor	r27, r27
 1e2:	4a 30       	cpi	r20, 0x0A	; 10
 1e4:	31 f4       	brne	.+12     	; 0x1f2 <__itoa_ncheck+0x12>
 1e6:	99 23       	and	r25, r25
 1e8:	22 f4       	brpl	.+8      	; 0x1f2 <__itoa_ncheck+0x12>
 1ea:	bd e2       	ldi	r27, 0x2D	; 45
 1ec:	90 95       	com	r25
 1ee:	81 95       	neg	r24
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__utoa_common>

000001f6 <__utoa_ncheck>:
 1f6:	bb 27       	eor	r27, r27

000001f8 <__utoa_common>:
 1f8:	fb 01       	movw	r30, r22
 1fa:	55 27       	eor	r21, r21
 1fc:	aa 27       	eor	r26, r26
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	aa 1f       	adc	r26, r26
 204:	a4 17       	cp	r26, r20
 206:	10 f0       	brcs	.+4      	; 0x20c <__utoa_common+0x14>
 208:	a4 1b       	sub	r26, r20
 20a:	83 95       	inc	r24
 20c:	50 51       	subi	r21, 0x10	; 16
 20e:	b9 f7       	brne	.-18     	; 0x1fe <__utoa_common+0x6>
 210:	a0 5d       	subi	r26, 0xD0	; 208
 212:	aa 33       	cpi	r26, 0x3A	; 58
 214:	08 f0       	brcs	.+2      	; 0x218 <__utoa_common+0x20>
 216:	a9 5d       	subi	r26, 0xD9	; 217
 218:	a1 93       	st	Z+, r26
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	79 f7       	brne	.-34     	; 0x1fc <__utoa_common+0x4>
 21e:	b1 11       	cpse	r27, r1
 220:	b1 93       	st	Z+, r27
 222:	11 92       	st	Z+, r1
 224:	cb 01       	movw	r24, r22
 226:	0c 94 15 01 	jmp	0x22a	; 0x22a <strrev>

0000022a <strrev>:
 22a:	dc 01       	movw	r26, r24
 22c:	fc 01       	movw	r30, r24
 22e:	67 2f       	mov	r22, r23
 230:	71 91       	ld	r23, Z+
 232:	77 23       	and	r23, r23
 234:	e1 f7       	brne	.-8      	; 0x22e <strrev+0x4>
 236:	32 97       	sbiw	r30, 0x02	; 2
 238:	04 c0       	rjmp	.+8      	; 0x242 <strrev+0x18>
 23a:	7c 91       	ld	r23, X
 23c:	6d 93       	st	X+, r22
 23e:	70 83       	st	Z, r23
 240:	62 91       	ld	r22, -Z
 242:	ae 17       	cp	r26, r30
 244:	bf 07       	cpc	r27, r31
 246:	c8 f3       	brcs	.-14     	; 0x23a <strrev+0x10>
 248:	08 95       	ret

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
