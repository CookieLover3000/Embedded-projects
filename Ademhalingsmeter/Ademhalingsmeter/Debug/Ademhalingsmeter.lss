
Ademhalingsmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000082c  000008a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b63  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000869  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003eb  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000475  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000402  00000000  00000000  000026d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002ad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  8e:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <map>:
void writeString(char st[]);
void writeInt(int i);
uint16_t leesADCwaarde();
void printUsart(int x);

long map(long x, long in_min, long in_max, long out_min, long out_max) {
  96:	4f 92       	push	r4
  98:	5f 92       	push	r5
  9a:	6f 92       	push	r6
  9c:	7f 92       	push	r7
  9e:	af 92       	push	r10
  a0:	bf 92       	push	r11
  a2:	cf 92       	push	r12
  a4:	df 92       	push	r13
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	29 01       	movw	r4, r18
  b8:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  ba:	9b 01       	movw	r18, r22
  bc:	ac 01       	movw	r20, r24
  be:	24 19       	sub	r18, r4
  c0:	35 09       	sbc	r19, r5
  c2:	46 09       	sbc	r20, r6
  c4:	57 09       	sbc	r21, r7
  c6:	89 89       	ldd	r24, Y+17	; 0x11
  c8:	9a 89       	ldd	r25, Y+18	; 0x12
  ca:	ab 89       	ldd	r26, Y+19	; 0x13
  cc:	bc 89       	ldd	r27, Y+20	; 0x14
  ce:	bc 01       	movw	r22, r24
  d0:	cd 01       	movw	r24, r26
  d2:	6a 19       	sub	r22, r10
  d4:	7b 09       	sbc	r23, r11
  d6:	8c 09       	sbc	r24, r12
  d8:	9d 09       	sbc	r25, r13
  da:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__mulsi3>
  de:	a8 01       	movw	r20, r16
  e0:	97 01       	movw	r18, r14
  e2:	24 19       	sub	r18, r4
  e4:	35 09       	sbc	r19, r5
  e6:	46 09       	sbc	r20, r6
  e8:	57 09       	sbc	r21, r7
  ea:	0e 94 84 03 	call	0x708	; 0x708 <__divmodsi4>
  ee:	c6 01       	movw	r24, r12
  f0:	b5 01       	movw	r22, r10
  f2:	62 0f       	add	r22, r18
  f4:	73 1f       	adc	r23, r19
  f6:	84 1f       	adc	r24, r20
  f8:	95 1f       	adc	r25, r21
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	df 90       	pop	r13
 108:	cf 90       	pop	r12
 10a:	bf 90       	pop	r11
 10c:	af 90       	pop	r10
 10e:	7f 90       	pop	r7
 110:	6f 90       	pop	r6
 112:	5f 90       	pop	r5
 114:	4f 90       	pop	r4
 116:	08 95       	ret

00000118 <initADC>:
}

void initADC()
{
	// Welke Voltage reference nodig (table 23-3)
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // Voltage Reference: AVcc witch external capacitator at AREF pin - Analog Channel = ADC5
 118:	85 e4       	ldi	r24, 0x45	; 69
 11a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS2); // Prescaler 32
 11e:	85 e8       	ldi	r24, 0x85	; 133
 120:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 124:	08 95       	ret

00000126 <initUsart>:
}

void initUsart()
{
	UCSR0A = 0;
 126:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Enable de USART Transmitter */
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H=00;
 136:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103; /* baudrade 9600 */
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 140:	08 95       	ret

00000142 <writeChar>:
}

void writeChar(char x)
{
	while (~UCSR0A & (1 << UDRE0));
 142:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 146:	95 ff       	sbrs	r25, 5
 148:	fc cf       	rjmp	.-8      	; 0x142 <writeChar>
	UDR0 = x;
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14e:	08 95       	ret

00000150 <writeString>:
}

void writeString(char st[])
{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	03 c0       	rjmp	.+6      	; 0x162 <writeString+0x12>
	writeChar(st[i]);
 15c:	0e 94 a1 00 	call	0x142	; 0x142 <writeChar>
	UDR0 = x;
}

void writeString(char st[])
{
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
 160:	cf 5f       	subi	r28, 0xFF	; 255
 162:	f8 01       	movw	r30, r16
 164:	ec 0f       	add	r30, r28
 166:	f1 1d       	adc	r31, r1
 168:	80 81       	ld	r24, Z
 16a:	81 11       	cpse	r24, r1
 16c:	f7 cf       	rjmp	.-18     	; 0x15c <writeString+0xc>
	writeChar(st[i]);
}
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <writeInt>:

void writeInt(int i)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	28 97       	sbiw	r28, 0x08	; 8
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	be 01       	movw	r22, r28
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	0e 94 df 03 	call	0x7be	; 0x7be <__itoa_ncheck>
	char buffer[8];
	itoa(i,buffer,10);
	writeString(buffer);
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 a8 00 	call	0x150	; 0x150 <writeString>
}
 19e:	28 96       	adiw	r28, 0x08	; 8
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <leesADCwaarde>:

uint16_t leesADCwaarde()
{
	ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
 1b0:	ea e7       	ldi	r30, 0x7A	; 122
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 65       	ori	r24, 0x50	; 80
 1b8:	80 83       	st	Z, r24
	while(~ADCSRA & (1 << ADIF));
 1ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1be:	84 ff       	sbrs	r24, 4
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <leesADCwaarde+0xa>
	uint16_t a = ADC;
 1c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//	a %= 10; // werkt niet maar was wel fijner om te lezen omdat de schaal kleiner was.
	return a;
}
 1ca:	08 95       	ret

000001cc <printUsart>:

void printUsart(int x)
{
	writeInt(x);
 1cc:	0e 94 bb 00 	call	0x176	; 0x176 <writeInt>
	writeString("\n\r");
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 a8 00 	call	0x150	; 0x150 <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	84 e3       	ldi	r24, 0x34	; 52
 1dc:	9c e0       	ldi	r25, 0x0C	; 12
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <printUsart+0x12>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <printUsart+0x1c>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <main>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int main(void)
{
	initADC();
 1ec:	0e 94 8c 00 	call	0x118	; 0x118 <initADC>
	initUsart();
 1f0:	0e 94 93 00 	call	0x126	; 0x126 <initUsart>
const float STRAIGHT_RESISTANCE = 37300.0;
const float BEND_RESISTANCE = 90000.0;

while (1) {
	
	int flexADC = leesADCwaarde();
 1f4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <leesADCwaarde>
	float flexV = flexADC * VCC / 1023.0;
 1f8:	bc 01       	movw	r22, r24
 1fa:	99 0f       	add	r25, r25
 1fc:	88 0b       	sbc	r24, r24
 1fe:	99 0b       	sbc	r25, r25
 200:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 204:	29 e2       	ldi	r18, 0x29	; 41
 206:	3c e5       	ldi	r19, 0x5C	; 92
 208:	4f e9       	ldi	r20, 0x9F	; 159
 20a:	50 e4       	ldi	r21, 0x40	; 64
 20c:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 ec       	ldi	r19, 0xC0	; 192
 214:	4f e7       	ldi	r20, 0x7F	; 127
 216:	54 e4       	ldi	r21, 0x44	; 68
 218:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__divsf3>
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
	float flexR = R_DIV * (VCC / flexV - 1.0);
 220:	69 e2       	ldi	r22, 0x29	; 41
 222:	7c e5       	ldi	r23, 0x5C	; 92
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	90 e4       	ldi	r25, 0x40	; 64
 228:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__divsf3>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e8       	ldi	r20, 0x80	; 128
 232:	5f e3       	ldi	r21, 0x3F	; 63
 234:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__subsf3>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	3c e8       	ldi	r19, 0x8C	; 140
 23c:	49 e3       	ldi	r20, 0x39	; 57
 23e:	57 e4       	ldi	r21, 0x47	; 71
 240:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 244:	6b 01       	movw	r12, r22
 246:	7c 01       	movw	r14, r24
	
	writeString("Resistance: ");
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 a8 00 	call	0x150	; 0x150 <writeString>
	printUsart(flexR);
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	0e 94 43 02 	call	0x486	; 0x486 <__fixsfsi>
 258:	cb 01       	movw	r24, r22
 25a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <printUsart>

	// Use the calculated resistance to estimate the sensor's bend angle:

	float angle = map(flexR, STRAIGHT_RESISTANCE, BEND_RESISTANCE, 0, 90.0);
 25e:	c7 01       	movw	r24, r14
 260:	b6 01       	movw	r22, r12
 262:	0e 94 43 02 	call	0x486	; 0x486 <__fixsfsi>
 266:	1f 92       	push	r1
 268:	1f 92       	push	r1
 26a:	1f 92       	push	r1
 26c:	2a e5       	ldi	r18, 0x5A	; 90
 26e:	2f 93       	push	r18
 270:	a1 2c       	mov	r10, r1
 272:	b1 2c       	mov	r11, r1
 274:	65 01       	movw	r12, r10
 276:	10 e9       	ldi	r17, 0x90	; 144
 278:	e1 2e       	mov	r14, r17
 27a:	1f e5       	ldi	r17, 0x5F	; 95
 27c:	f1 2e       	mov	r15, r17
 27e:	01 e0       	ldi	r16, 0x01	; 1
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	24 eb       	ldi	r18, 0xB4	; 180
 284:	31 e9       	ldi	r19, 0x91	; 145
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	0e 94 4b 00 	call	0x96	; 0x96 <map>
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 29a:	6b 01       	movw	r12, r22
 29c:	7c 01       	movw	r14, r24
	
	
	writeString("Bend: ");
 29e:	80 e1       	ldi	r24, 0x10	; 16
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 a8 00 	call	0x150	; 0x150 <writeString>
	printUsart(angle);
 2a6:	c7 01       	movw	r24, r14
 2a8:	b6 01       	movw	r22, r12
 2aa:	0e 94 43 02 	call	0x486	; 0x486 <__fixsfsi>
 2ae:	cb 01       	movw	r24, r22
 2b0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <printUsart>
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	84 e3       	ldi	r24, 0x34	; 52
 2b8:	9c e0       	ldi	r25, 0x0C	; 12
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0xce>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0xd8>
 2c4:	00 00       	nop
 2c6:	96 cf       	rjmp	.-212    	; 0x1f4 <main+0x8>

000002c8 <__subsf3>:
 2c8:	50 58       	subi	r21, 0x80	; 128

000002ca <__addsf3>:
 2ca:	bb 27       	eor	r27, r27
 2cc:	aa 27       	eor	r26, r26
 2ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__addsf3x>
 2d2:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 2d6:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 2da:	38 f0       	brcs	.+14     	; 0x2ea <__addsf3+0x20>
 2dc:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <__addsf3+0x20>
 2e2:	39 f4       	brne	.+14     	; 0x2f2 <__addsf3+0x28>
 2e4:	9f 3f       	cpi	r25, 0xFF	; 255
 2e6:	19 f4       	brne	.+6      	; 0x2ee <__addsf3+0x24>
 2e8:	26 f4       	brtc	.+8      	; 0x2f2 <__addsf3+0x28>
 2ea:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>
 2ee:	0e f4       	brtc	.+2      	; 0x2f2 <__addsf3+0x28>
 2f0:	e0 95       	com	r30
 2f2:	e7 fb       	bst	r30, 7
 2f4:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>

000002f8 <__addsf3x>:
 2f8:	e9 2f       	mov	r30, r25
 2fa:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 2fe:	58 f3       	brcs	.-42     	; 0x2d6 <__addsf3+0xc>
 300:	ba 17       	cp	r27, r26
 302:	62 07       	cpc	r22, r18
 304:	73 07       	cpc	r23, r19
 306:	84 07       	cpc	r24, r20
 308:	95 07       	cpc	r25, r21
 30a:	20 f0       	brcs	.+8      	; 0x314 <__addsf3x+0x1c>
 30c:	79 f4       	brne	.+30     	; 0x32c <__addsf3x+0x34>
 30e:	a6 f5       	brtc	.+104    	; 0x378 <__addsf3x+0x80>
 310:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_zero>
 314:	0e f4       	brtc	.+2      	; 0x318 <__addsf3x+0x20>
 316:	e0 95       	com	r30
 318:	0b 2e       	mov	r0, r27
 31a:	ba 2f       	mov	r27, r26
 31c:	a0 2d       	mov	r26, r0
 31e:	0b 01       	movw	r0, r22
 320:	b9 01       	movw	r22, r18
 322:	90 01       	movw	r18, r0
 324:	0c 01       	movw	r0, r24
 326:	ca 01       	movw	r24, r20
 328:	a0 01       	movw	r20, r0
 32a:	11 24       	eor	r1, r1
 32c:	ff 27       	eor	r31, r31
 32e:	59 1b       	sub	r21, r25
 330:	99 f0       	breq	.+38     	; 0x358 <__addsf3x+0x60>
 332:	59 3f       	cpi	r21, 0xF9	; 249
 334:	50 f4       	brcc	.+20     	; 0x34a <__addsf3x+0x52>
 336:	50 3e       	cpi	r21, 0xE0	; 224
 338:	68 f1       	brcs	.+90     	; 0x394 <__addsf3x+0x9c>
 33a:	1a 16       	cp	r1, r26
 33c:	f0 40       	sbci	r31, 0x00	; 0
 33e:	a2 2f       	mov	r26, r18
 340:	23 2f       	mov	r18, r19
 342:	34 2f       	mov	r19, r20
 344:	44 27       	eor	r20, r20
 346:	58 5f       	subi	r21, 0xF8	; 248
 348:	f3 cf       	rjmp	.-26     	; 0x330 <__addsf3x+0x38>
 34a:	46 95       	lsr	r20
 34c:	37 95       	ror	r19
 34e:	27 95       	ror	r18
 350:	a7 95       	ror	r26
 352:	f0 40       	sbci	r31, 0x00	; 0
 354:	53 95       	inc	r21
 356:	c9 f7       	brne	.-14     	; 0x34a <__addsf3x+0x52>
 358:	7e f4       	brtc	.+30     	; 0x378 <__addsf3x+0x80>
 35a:	1f 16       	cp	r1, r31
 35c:	ba 0b       	sbc	r27, r26
 35e:	62 0b       	sbc	r22, r18
 360:	73 0b       	sbc	r23, r19
 362:	84 0b       	sbc	r24, r20
 364:	ba f0       	brmi	.+46     	; 0x394 <__addsf3x+0x9c>
 366:	91 50       	subi	r25, 0x01	; 1
 368:	a1 f0       	breq	.+40     	; 0x392 <__addsf3x+0x9a>
 36a:	ff 0f       	add	r31, r31
 36c:	bb 1f       	adc	r27, r27
 36e:	66 1f       	adc	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	c2 f7       	brpl	.-16     	; 0x366 <__addsf3x+0x6e>
 376:	0e c0       	rjmp	.+28     	; 0x394 <__addsf3x+0x9c>
 378:	ba 0f       	add	r27, r26
 37a:	62 1f       	adc	r22, r18
 37c:	73 1f       	adc	r23, r19
 37e:	84 1f       	adc	r24, r20
 380:	48 f4       	brcc	.+18     	; 0x394 <__addsf3x+0x9c>
 382:	87 95       	ror	r24
 384:	77 95       	ror	r23
 386:	67 95       	ror	r22
 388:	b7 95       	ror	r27
 38a:	f7 95       	ror	r31
 38c:	9e 3f       	cpi	r25, 0xFE	; 254
 38e:	08 f0       	brcs	.+2      	; 0x392 <__addsf3x+0x9a>
 390:	b0 cf       	rjmp	.-160    	; 0x2f2 <__addsf3+0x28>
 392:	93 95       	inc	r25
 394:	88 0f       	add	r24, r24
 396:	08 f0       	brcs	.+2      	; 0x39a <__addsf3x+0xa2>
 398:	99 27       	eor	r25, r25
 39a:	ee 0f       	add	r30, r30
 39c:	97 95       	ror	r25
 39e:	87 95       	ror	r24
 3a0:	08 95       	ret

000003a2 <__divsf3>:
 3a2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__divsf3x>
 3a6:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 3aa:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 3ae:	58 f0       	brcs	.+22     	; 0x3c6 <__divsf3+0x24>
 3b0:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 3b4:	40 f0       	brcs	.+16     	; 0x3c6 <__divsf3+0x24>
 3b6:	29 f4       	brne	.+10     	; 0x3c2 <__divsf3+0x20>
 3b8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ba:	29 f0       	breq	.+10     	; 0x3c6 <__divsf3+0x24>
 3bc:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 3c0:	51 11       	cpse	r21, r1
 3c2:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 3c6:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>

000003ca <__divsf3x>:
 3ca:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 3ce:	68 f3       	brcs	.-38     	; 0x3aa <__divsf3+0x8>

000003d0 <__divsf3_pse>:
 3d0:	99 23       	and	r25, r25
 3d2:	b1 f3       	breq	.-20     	; 0x3c0 <__divsf3+0x1e>
 3d4:	55 23       	and	r21, r21
 3d6:	91 f3       	breq	.-28     	; 0x3bc <__divsf3+0x1a>
 3d8:	95 1b       	sub	r25, r21
 3da:	55 0b       	sbc	r21, r21
 3dc:	bb 27       	eor	r27, r27
 3de:	aa 27       	eor	r26, r26
 3e0:	62 17       	cp	r22, r18
 3e2:	73 07       	cpc	r23, r19
 3e4:	84 07       	cpc	r24, r20
 3e6:	38 f0       	brcs	.+14     	; 0x3f6 <__divsf3_pse+0x26>
 3e8:	9f 5f       	subi	r25, 0xFF	; 255
 3ea:	5f 4f       	sbci	r21, 0xFF	; 255
 3ec:	22 0f       	add	r18, r18
 3ee:	33 1f       	adc	r19, r19
 3f0:	44 1f       	adc	r20, r20
 3f2:	aa 1f       	adc	r26, r26
 3f4:	a9 f3       	breq	.-22     	; 0x3e0 <__divsf3_pse+0x10>
 3f6:	35 d0       	rcall	.+106    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3f8:	0e 2e       	mov	r0, r30
 3fa:	3a f0       	brmi	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fc:	e0 e8       	ldi	r30, 0x80	; 128
 3fe:	32 d0       	rcall	.+100    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 400:	91 50       	subi	r25, 0x01	; 1
 402:	50 40       	sbci	r21, 0x00	; 0
 404:	e6 95       	lsr	r30
 406:	00 1c       	adc	r0, r0
 408:	ca f7       	brpl	.-14     	; 0x3fc <__divsf3_pse+0x2c>
 40a:	2b d0       	rcall	.+86     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 40c:	fe 2f       	mov	r31, r30
 40e:	29 d0       	rcall	.+82     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	88 1f       	adc	r24, r24
 416:	bb 1f       	adc	r27, r27
 418:	26 17       	cp	r18, r22
 41a:	37 07       	cpc	r19, r23
 41c:	48 07       	cpc	r20, r24
 41e:	ab 07       	cpc	r26, r27
 420:	b0 e8       	ldi	r27, 0x80	; 128
 422:	09 f0       	breq	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	bb 0b       	sbc	r27, r27
 426:	80 2d       	mov	r24, r0
 428:	bf 01       	movw	r22, r30
 42a:	ff 27       	eor	r31, r31
 42c:	93 58       	subi	r25, 0x83	; 131
 42e:	5f 4f       	sbci	r21, 0xFF	; 255
 430:	3a f0       	brmi	.+14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 432:	9e 3f       	cpi	r25, 0xFE	; 254
 434:	51 05       	cpc	r21, r1
 436:	78 f0       	brcs	.+30     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 438:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 43c:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 440:	5f 3f       	cpi	r21, 0xFF	; 255
 442:	e4 f3       	brlt	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	98 3e       	cpi	r25, 0xE8	; 232
 446:	d4 f3       	brlt	.-12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 448:	86 95       	lsr	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b7 95       	ror	r27
 450:	f7 95       	ror	r31
 452:	9f 5f       	subi	r25, 0xFF	; 255
 454:	c9 f7       	brne	.-14     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 456:	88 0f       	add	r24, r24
 458:	91 1d       	adc	r25, r1
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	97 f9       	bld	r25, 7
 460:	08 95       	ret
 462:	e1 e0       	ldi	r30, 0x01	; 1
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	bb 1f       	adc	r27, r27
 46c:	62 17       	cp	r22, r18
 46e:	73 07       	cpc	r23, r19
 470:	84 07       	cpc	r24, r20
 472:	ba 07       	cpc	r27, r26
 474:	20 f0       	brcs	.+8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 476:	62 1b       	sub	r22, r18
 478:	73 0b       	sbc	r23, r19
 47a:	84 0b       	sbc	r24, r20
 47c:	ba 0b       	sbc	r27, r26
 47e:	ee 1f       	adc	r30, r30
 480:	88 f7       	brcc	.-30     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 482:	e0 95       	com	r30
 484:	08 95       	ret

00000486 <__fixsfsi>:
 486:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
 48a:	68 94       	set
 48c:	b1 11       	cpse	r27, r1
 48e:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 492:	08 95       	ret

00000494 <__fixunssfsi>:
 494:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_splitA>
 498:	88 f0       	brcs	.+34     	; 0x4bc <__fixunssfsi+0x28>
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	98 f0       	brcs	.+38     	; 0x4c4 <__fixunssfsi+0x30>
 49e:	b9 2f       	mov	r27, r25
 4a0:	99 27       	eor	r25, r25
 4a2:	b7 51       	subi	r27, 0x17	; 23
 4a4:	b0 f0       	brcs	.+44     	; 0x4d2 <__fixunssfsi+0x3e>
 4a6:	e1 f0       	breq	.+56     	; 0x4e0 <__fixunssfsi+0x4c>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a f0       	brmi	.+6      	; 0x4b8 <__fixunssfsi+0x24>
 4b2:	ba 95       	dec	r27
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__fixunssfsi+0x14>
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <__fixunssfsi+0x4c>
 4b8:	b1 30       	cpi	r27, 0x01	; 1
 4ba:	91 f0       	breq	.+36     	; 0x4e0 <__fixunssfsi+0x4c>
 4bc:	0e 94 00 03 	call	0x600	; 0x600 <__fp_zero>
 4c0:	b1 e0       	ldi	r27, 0x01	; 1
 4c2:	08 95       	ret
 4c4:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_zero>
 4c8:	67 2f       	mov	r22, r23
 4ca:	78 2f       	mov	r23, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	b8 5f       	subi	r27, 0xF8	; 248
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__fixunssfsi+0x4c>
 4d2:	b9 3f       	cpi	r27, 0xF9	; 249
 4d4:	cc f3       	brlt	.-14     	; 0x4c8 <__fixunssfsi+0x34>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b3 95       	inc	r27
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__fixunssfsi+0x42>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__fixunssfsi+0x5c>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__floatunsisf>:
 4f2:	e8 94       	clt
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__floatsisf+0x12>

000004f6 <__floatsisf>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__floatsisf+0x12>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	99 23       	and	r25, r25
 50a:	a9 f0       	breq	.+42     	; 0x536 <__floatsisf+0x40>
 50c:	f9 2f       	mov	r31, r25
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	bb 27       	eor	r27, r27
 512:	93 95       	inc	r25
 514:	f6 95       	lsr	r31
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f1 11       	cpse	r31, r1
 520:	f8 cf       	rjmp	.-16     	; 0x512 <__floatsisf+0x1c>
 522:	fa f4       	brpl	.+62     	; 0x562 <__floatsisf+0x6c>
 524:	bb 0f       	add	r27, r27
 526:	11 f4       	brne	.+4      	; 0x52c <__floatsisf+0x36>
 528:	60 ff       	sbrs	r22, 0
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__floatsisf+0x6c>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	16 c0       	rjmp	.+44     	; 0x562 <__floatsisf+0x6c>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <__floatsisf+0x48>
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__floatsisf+0x6a>
 53e:	77 23       	and	r23, r23
 540:	21 f0       	breq	.+8      	; 0x54a <__floatsisf+0x54>
 542:	9e e8       	ldi	r25, 0x8E	; 142
 544:	87 2f       	mov	r24, r23
 546:	76 2f       	mov	r23, r22
 548:	05 c0       	rjmp	.+10     	; 0x554 <__floatsisf+0x5e>
 54a:	66 23       	and	r22, r22
 54c:	71 f0       	breq	.+28     	; 0x56a <__floatsisf+0x74>
 54e:	96 e8       	ldi	r25, 0x86	; 134
 550:	86 2f       	mov	r24, r22
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	2a f0       	brmi	.+10     	; 0x562 <__floatsisf+0x6c>
 558:	9a 95       	dec	r25
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	da f7       	brpl	.-10     	; 0x558 <__floatsisf+0x62>
 562:	88 0f       	add	r24, r24
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_inf>:
 56c:	97 f9       	bld	r25, 7
 56e:	9f 67       	ori	r25, 0x7F	; 127
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	08 95       	ret

00000578 <__fp_nan>:
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	80 ec       	ldi	r24, 0xC0	; 192
 57c:	08 95       	ret

0000057e <__fp_pscA>:
 57e:	00 24       	eor	r0, r0
 580:	0a 94       	dec	r0
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	18 06       	cpc	r1, r24
 588:	09 06       	cpc	r0, r25
 58a:	08 95       	ret

0000058c <__fp_pscB>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	12 16       	cp	r1, r18
 592:	13 06       	cpc	r1, r19
 594:	14 06       	cpc	r1, r20
 596:	05 06       	cpc	r0, r21
 598:	08 95       	ret

0000059a <__fp_round>:
 59a:	09 2e       	mov	r0, r25
 59c:	03 94       	inc	r0
 59e:	00 0c       	add	r0, r0
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0xc>
 5a2:	88 23       	and	r24, r24
 5a4:	52 f0       	brmi	.+20     	; 0x5ba <__fp_round+0x20>
 5a6:	bb 0f       	add	r27, r27
 5a8:	40 f4       	brcc	.+16     	; 0x5ba <__fp_round+0x20>
 5aa:	bf 2b       	or	r27, r31
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__fp_round+0x18>
 5ae:	60 ff       	sbrs	r22, 0
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <__fp_round+0x20>
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__fp_split3>:
 5bc:	57 fd       	sbrc	r21, 7
 5be:	90 58       	subi	r25, 0x80	; 128
 5c0:	44 0f       	add	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	59 f0       	breq	.+22     	; 0x5dc <__fp_splitA+0x10>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <__fp_splitA+0x1a>
 5ca:	47 95       	ror	r20

000005cc <__fp_splitA>:
 5cc:	88 0f       	add	r24, r24
 5ce:	97 fb       	bst	r25, 7
 5d0:	99 1f       	adc	r25, r25
 5d2:	61 f0       	breq	.+24     	; 0x5ec <__fp_splitA+0x20>
 5d4:	9f 3f       	cpi	r25, 0xFF	; 255
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <__fp_splitA+0x2a>
 5d8:	87 95       	ror	r24
 5da:	08 95       	ret
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	f2 cf       	rjmp	.-28     	; 0x5ca <__fp_split3+0xe>
 5e6:	46 95       	lsr	r20
 5e8:	f1 df       	rcall	.-30     	; 0x5cc <__fp_splitA>
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <__fp_splitA+0x30>
 5ec:	16 16       	cp	r1, r22
 5ee:	17 06       	cpc	r1, r23
 5f0:	18 06       	cpc	r1, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	f1 cf       	rjmp	.-30     	; 0x5d8 <__fp_splitA+0xc>
 5f6:	86 95       	lsr	r24
 5f8:	71 05       	cpc	r23, r1
 5fa:	61 05       	cpc	r22, r1
 5fc:	08 94       	sec
 5fe:	08 95       	ret

00000600 <__fp_zero>:
 600:	e8 94       	clt

00000602 <__fp_szero>:
 602:	bb 27       	eor	r27, r27
 604:	66 27       	eor	r22, r22
 606:	77 27       	eor	r23, r23
 608:	cb 01       	movw	r24, r22
 60a:	97 f9       	bld	r25, 7
 60c:	08 95       	ret

0000060e <__mulsf3>:
 60e:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3x>
 612:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 616:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 61a:	38 f0       	brcs	.+14     	; 0x62a <__mulsf3+0x1c>
 61c:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 620:	20 f0       	brcs	.+8      	; 0x62a <__mulsf3+0x1c>
 622:	95 23       	and	r25, r21
 624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1c>
 626:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 62a:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>
 62e:	11 24       	eor	r1, r1
 630:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>

00000634 <__mulsf3x>:
 634:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 638:	70 f3       	brcs	.-36     	; 0x616 <__mulsf3+0x8>

0000063a <__mulsf3_pse>:
 63a:	95 9f       	mul	r25, r21
 63c:	c1 f3       	breq	.-16     	; 0x62e <__mulsf3+0x20>
 63e:	95 0f       	add	r25, r21
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	55 1f       	adc	r21, r21
 644:	62 9f       	mul	r22, r18
 646:	f0 01       	movw	r30, r0
 648:	72 9f       	mul	r23, r18
 64a:	bb 27       	eor	r27, r27
 64c:	f0 0d       	add	r31, r0
 64e:	b1 1d       	adc	r27, r1
 650:	63 9f       	mul	r22, r19
 652:	aa 27       	eor	r26, r26
 654:	f0 0d       	add	r31, r0
 656:	b1 1d       	adc	r27, r1
 658:	aa 1f       	adc	r26, r26
 65a:	64 9f       	mul	r22, r20
 65c:	66 27       	eor	r22, r22
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	66 1f       	adc	r22, r22
 664:	82 9f       	mul	r24, r18
 666:	22 27       	eor	r18, r18
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	62 1f       	adc	r22, r18
 66e:	73 9f       	mul	r23, r19
 670:	b0 0d       	add	r27, r0
 672:	a1 1d       	adc	r26, r1
 674:	62 1f       	adc	r22, r18
 676:	83 9f       	mul	r24, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	22 1f       	adc	r18, r18
 67e:	74 9f       	mul	r23, r20
 680:	33 27       	eor	r19, r19
 682:	a0 0d       	add	r26, r0
 684:	61 1d       	adc	r22, r1
 686:	23 1f       	adc	r18, r19
 688:	84 9f       	mul	r24, r20
 68a:	60 0d       	add	r22, r0
 68c:	21 1d       	adc	r18, r1
 68e:	82 2f       	mov	r24, r18
 690:	76 2f       	mov	r23, r22
 692:	6a 2f       	mov	r22, r26
 694:	11 24       	eor	r1, r1
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	50 40       	sbci	r21, 0x00	; 0
 69a:	9a f0       	brmi	.+38     	; 0x6c2 <__mulsf3_pse+0x88>
 69c:	f1 f0       	breq	.+60     	; 0x6da <__mulsf3_pse+0xa0>
 69e:	88 23       	and	r24, r24
 6a0:	4a f0       	brmi	.+18     	; 0x6b4 <__mulsf3_pse+0x7a>
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	91 50       	subi	r25, 0x01	; 1
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	a9 f7       	brne	.-22     	; 0x69e <__mulsf3_pse+0x64>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	80 f0       	brcs	.+32     	; 0x6da <__mulsf3_pse+0xa0>
 6ba:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 6be:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	e4 f3       	brlt	.-8      	; 0x6be <__mulsf3_pse+0x84>
 6c6:	98 3e       	cpi	r25, 0xE8	; 232
 6c8:	d4 f3       	brlt	.-12     	; 0x6be <__mulsf3_pse+0x84>
 6ca:	86 95       	lsr	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b7 95       	ror	r27
 6d2:	f7 95       	ror	r31
 6d4:	e7 95       	ror	r30
 6d6:	9f 5f       	subi	r25, 0xFF	; 255
 6d8:	c1 f7       	brne	.-16     	; 0x6ca <__mulsf3_pse+0x90>
 6da:	fe 2b       	or	r31, r30
 6dc:	88 0f       	add	r24, r24
 6de:	91 1d       	adc	r25, r1
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__mulsi3>:
 6e8:	db 01       	movw	r26, r22
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	0e 94 a3 03 	call	0x746	; 0x746 <__muluhisi3>
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	a2 9f       	mul	r26, r18
 6f8:	80 0d       	add	r24, r0
 6fa:	91 1d       	adc	r25, r1
 6fc:	a3 9f       	mul	r26, r19
 6fe:	90 0d       	add	r25, r0
 700:	b2 9f       	mul	r27, r18
 702:	90 0d       	add	r25, r0
 704:	11 24       	eor	r1, r1
 706:	08 95       	ret

00000708 <__divmodsi4>:
 708:	05 2e       	mov	r0, r21
 70a:	97 fb       	bst	r25, 7
 70c:	1e f4       	brtc	.+6      	; 0x714 <__divmodsi4+0xc>
 70e:	00 94       	com	r0
 710:	0e 94 9b 03 	call	0x736	; 0x736 <__negsi2>
 714:	57 fd       	sbrc	r21, 7
 716:	07 d0       	rcall	.+14     	; 0x726 <__divmodsi4_neg2>
 718:	0e 94 ae 03 	call	0x75c	; 0x75c <__udivmodsi4>
 71c:	07 fc       	sbrc	r0, 7
 71e:	03 d0       	rcall	.+6      	; 0x726 <__divmodsi4_neg2>
 720:	4e f4       	brtc	.+18     	; 0x734 <__divmodsi4_exit>
 722:	0c 94 9b 03 	jmp	0x736	; 0x736 <__negsi2>

00000726 <__divmodsi4_neg2>:
 726:	50 95       	com	r21
 728:	40 95       	com	r20
 72a:	30 95       	com	r19
 72c:	21 95       	neg	r18
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	4f 4f       	sbci	r20, 0xFF	; 255
 732:	5f 4f       	sbci	r21, 0xFF	; 255

00000734 <__divmodsi4_exit>:
 734:	08 95       	ret

00000736 <__negsi2>:
 736:	90 95       	com	r25
 738:	80 95       	com	r24
 73a:	70 95       	com	r23
 73c:	61 95       	neg	r22
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__muluhisi3>:
 746:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__umulhisi3>
 74a:	a5 9f       	mul	r26, r21
 74c:	90 0d       	add	r25, r0
 74e:	b4 9f       	mul	r27, r20
 750:	90 0d       	add	r25, r0
 752:	a4 9f       	mul	r26, r20
 754:	80 0d       	add	r24, r0
 756:	91 1d       	adc	r25, r1
 758:	11 24       	eor	r1, r1
 75a:	08 95       	ret

0000075c <__udivmodsi4>:
 75c:	a1 e2       	ldi	r26, 0x21	; 33
 75e:	1a 2e       	mov	r1, r26
 760:	aa 1b       	sub	r26, r26
 762:	bb 1b       	sub	r27, r27
 764:	fd 01       	movw	r30, r26
 766:	0d c0       	rjmp	.+26     	; 0x782 <__udivmodsi4_ep>

00000768 <__udivmodsi4_loop>:
 768:	aa 1f       	adc	r26, r26
 76a:	bb 1f       	adc	r27, r27
 76c:	ee 1f       	adc	r30, r30
 76e:	ff 1f       	adc	r31, r31
 770:	a2 17       	cp	r26, r18
 772:	b3 07       	cpc	r27, r19
 774:	e4 07       	cpc	r30, r20
 776:	f5 07       	cpc	r31, r21
 778:	20 f0       	brcs	.+8      	; 0x782 <__udivmodsi4_ep>
 77a:	a2 1b       	sub	r26, r18
 77c:	b3 0b       	sbc	r27, r19
 77e:	e4 0b       	sbc	r30, r20
 780:	f5 0b       	sbc	r31, r21

00000782 <__udivmodsi4_ep>:
 782:	66 1f       	adc	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	1a 94       	dec	r1
 78c:	69 f7       	brne	.-38     	; 0x768 <__udivmodsi4_loop>
 78e:	60 95       	com	r22
 790:	70 95       	com	r23
 792:	80 95       	com	r24
 794:	90 95       	com	r25
 796:	9b 01       	movw	r18, r22
 798:	ac 01       	movw	r20, r24
 79a:	bd 01       	movw	r22, r26
 79c:	cf 01       	movw	r24, r30
 79e:	08 95       	ret

000007a0 <__umulhisi3>:
 7a0:	a2 9f       	mul	r26, r18
 7a2:	b0 01       	movw	r22, r0
 7a4:	b3 9f       	mul	r27, r19
 7a6:	c0 01       	movw	r24, r0
 7a8:	a3 9f       	mul	r26, r19
 7aa:	70 0d       	add	r23, r0
 7ac:	81 1d       	adc	r24, r1
 7ae:	11 24       	eor	r1, r1
 7b0:	91 1d       	adc	r25, r1
 7b2:	b2 9f       	mul	r27, r18
 7b4:	70 0d       	add	r23, r0
 7b6:	81 1d       	adc	r24, r1
 7b8:	11 24       	eor	r1, r1
 7ba:	91 1d       	adc	r25, r1
 7bc:	08 95       	ret

000007be <__itoa_ncheck>:
 7be:	bb 27       	eor	r27, r27
 7c0:	4a 30       	cpi	r20, 0x0A	; 10
 7c2:	31 f4       	brne	.+12     	; 0x7d0 <__itoa_ncheck+0x12>
 7c4:	99 23       	and	r25, r25
 7c6:	22 f4       	brpl	.+8      	; 0x7d0 <__itoa_ncheck+0x12>
 7c8:	bd e2       	ldi	r27, 0x2D	; 45
 7ca:	90 95       	com	r25
 7cc:	81 95       	neg	r24
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__utoa_common>

000007d4 <__utoa_ncheck>:
 7d4:	bb 27       	eor	r27, r27

000007d6 <__utoa_common>:
 7d6:	fb 01       	movw	r30, r22
 7d8:	55 27       	eor	r21, r21
 7da:	aa 27       	eor	r26, r26
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	aa 1f       	adc	r26, r26
 7e2:	a4 17       	cp	r26, r20
 7e4:	10 f0       	brcs	.+4      	; 0x7ea <__utoa_common+0x14>
 7e6:	a4 1b       	sub	r26, r20
 7e8:	83 95       	inc	r24
 7ea:	50 51       	subi	r21, 0x10	; 16
 7ec:	b9 f7       	brne	.-18     	; 0x7dc <__utoa_common+0x6>
 7ee:	a0 5d       	subi	r26, 0xD0	; 208
 7f0:	aa 33       	cpi	r26, 0x3A	; 58
 7f2:	08 f0       	brcs	.+2      	; 0x7f6 <__utoa_common+0x20>
 7f4:	a9 5d       	subi	r26, 0xD9	; 217
 7f6:	a1 93       	st	Z+, r26
 7f8:	00 97       	sbiw	r24, 0x00	; 0
 7fa:	79 f7       	brne	.-34     	; 0x7da <__utoa_common+0x4>
 7fc:	b1 11       	cpse	r27, r1
 7fe:	b1 93       	st	Z+, r27
 800:	11 92       	st	Z+, r1
 802:	cb 01       	movw	r24, r22
 804:	0c 94 04 04 	jmp	0x808	; 0x808 <strrev>

00000808 <strrev>:
 808:	dc 01       	movw	r26, r24
 80a:	fc 01       	movw	r30, r24
 80c:	67 2f       	mov	r22, r23
 80e:	71 91       	ld	r23, Z+
 810:	77 23       	and	r23, r23
 812:	e1 f7       	brne	.-8      	; 0x80c <strrev+0x4>
 814:	32 97       	sbiw	r30, 0x02	; 2
 816:	04 c0       	rjmp	.+8      	; 0x820 <strrev+0x18>
 818:	7c 91       	ld	r23, X
 81a:	6d 93       	st	X+, r22
 81c:	70 83       	st	Z, r23
 81e:	62 91       	ld	r22, -Z
 820:	ae 17       	cp	r26, r30
 822:	bf 07       	cpc	r27, r31
 824:	c8 f3       	brcs	.-14     	; 0x818 <strrev+0x10>
 826:	08 95       	ret

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
