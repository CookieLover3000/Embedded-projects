
Ademhalingsmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004b2  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000954  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079f  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039c  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c8  00000000  00000000  00001f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  8e:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initADC>:
}

void initADC()
{
	// Welke Voltage reference nodig (table 23-3)
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // Voltage Reference: AVcc witch external capacitator at AREF pin - Analog Channel = ADC5
  96:	85 e4       	ldi	r24, 0x45	; 69
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS2); // Prescaler 32
  9c:	85 e8       	ldi	r24, 0x85	; 133
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a2:	08 95       	ret

000000a4 <initUsart>:
}

void initUsart()
{
	UCSR0A = 0;
  a4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Enable de USART Transmitter */
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H=00;
  b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103; /* baudrade 9600 */
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	08 95       	ret

000000c0 <writeChar>:
}

void writeChar(char x)
{
	while (~UCSR0A & (1 << UDRE0));
  c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <writeChar>
	UDR0 = x;
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <writeString>:
}

void writeString(char st[])
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <writeString+0x12>
	writeChar(st[i]);
  da:	0e 94 60 00 	call	0xc0	; 0xc0 <writeChar>
	UDR0 = x;
}

void writeString(char st[])
{
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  de:	cf 5f       	subi	r28, 0xFF	; 255
  e0:	f8 01       	movw	r30, r16
  e2:	ec 0f       	add	r30, r28
  e4:	f1 1d       	adc	r31, r1
  e6:	80 81       	ld	r24, Z
  e8:	81 11       	cpse	r24, r1
  ea:	f7 cf       	rjmp	.-18     	; 0xda <writeString+0xc>
	writeChar(st[i]);
}
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <writeInt>:

void writeInt(int i)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	28 97       	sbiw	r28, 0x08	; 8
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	itoa(i,buffer,10);
 108:	4a e0       	ldi	r20, 0x0A	; 10
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	be 01       	movw	r22, r28
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	0e 94 17 02 	call	0x42e	; 0x42e <itoa>
	writeString(buffer);
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <writeString>
}
 11e:	28 96       	adiw	r28, 0x08	; 8
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <leesADCwaarde>:

uint16_t leesADCwaarde()
{
	ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 65       	ori	r24, 0x50	; 80
 138:	80 83       	st	Z, r24
	while(~ADCSRA & (1 << ADIF));
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13e:	84 ff       	sbrs	r24, 4
 140:	fc cf       	rjmp	.-8      	; 0x13a <leesADCwaarde+0xa>
	uint16_t a = ADC;
 142:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 146:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//	a %= 10; // werkt niet maar was wel fijner om te lezen omdat de schaal kleiner was.
	return a;
}
 14a:	08 95       	ret

0000014c <printUsart>:

void printUsart(uint16_t x)
{
	writeInt(x);
 14c:	0e 94 7a 00 	call	0xf4	; 0xf4 <writeInt>
	writeString("\n\r");
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 67 00 	call	0xce	; 0xce <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	83 e2       	ldi	r24, 0x23	; 35
 15a:	94 ef       	ldi	r25, 0xF4	; 244
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <printUsart+0x10>
 160:	00 c0       	rjmp	.+0      	; 0x162 <printUsart+0x16>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <main>:
uint16_t leesADCwaarde();
void printUsart(uint16_t a);

int main(void)
{
	initADC();
 166:	0e 94 4b 00 	call	0x96	; 0x96 <initADC>
	initUsart();
 16a:	0e 94 52 00 	call	0xa4	; 0xa4 <initUsart>
	uint16_t adcWaarde;
	uint16_t adcWaardeTotaal;
	
    while (1) 
    {
		for (int i = 0; i < 10; i++) {
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	04 c0       	rjmp	.+8      	; 0x17c <main+0x16>
			adcWaarde = leesADCwaarde();
 174:	0e 94 98 00 	call	0x130	; 0x130 <leesADCwaarde>
 178:	8c 01       	movw	r16, r24
	uint16_t adcWaarde;
	uint16_t adcWaardeTotaal;
	
    while (1) 
    {
		for (int i = 0; i < 10; i++) {
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	ca 30       	cpi	r28, 0x0A	; 10
 17e:	d1 05       	cpc	r29, r1
 180:	cc f3       	brlt	.-14     	; 0x174 <main+0xe>
			adcWaarde = leesADCwaarde();
			adcWaardeTotaal += adcWaarde;
		}
		adcWaarde *= 1.5;
 182:	b8 01       	movw	r22, r16
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 0d 01 	call	0x21a	; 0x21a <__floatunsisf>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 ec       	ldi	r20, 0xC0	; 192
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__mulsf3>
 198:	0e 94 de 00 	call	0x1bc	; 0x1bc <__fixunssfsi>
		adcWaarde /= 10;
 19c:	9b 01       	movw	r18, r22
 19e:	ad ec       	ldi	r26, 0xCD	; 205
 1a0:	bc ec       	ldi	r27, 0xCC	; 204
 1a2:	0e 94 08 02 	call	0x410	; 0x410 <__umulhisi3>
 1a6:	8c 01       	movw	r16, r24
 1a8:	16 95       	lsr	r17
 1aa:	07 95       	ror	r16
 1ac:	16 95       	lsr	r17
 1ae:	07 95       	ror	r16
 1b0:	16 95       	lsr	r17
 1b2:	07 95       	ror	r16

		printUsart(adcWaarde);
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <printUsart>
    }
 1ba:	d9 cf       	rjmp	.-78     	; 0x16e <main+0x8>

000001bc <__fixunssfsi>:
 1bc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__fp_splitA>
 1c0:	88 f0       	brcs	.+34     	; 0x1e4 <__fixunssfsi+0x28>
 1c2:	9f 57       	subi	r25, 0x7F	; 127
 1c4:	98 f0       	brcs	.+38     	; 0x1ec <__fixunssfsi+0x30>
 1c6:	b9 2f       	mov	r27, r25
 1c8:	99 27       	eor	r25, r25
 1ca:	b7 51       	subi	r27, 0x17	; 23
 1cc:	b0 f0       	brcs	.+44     	; 0x1fa <__fixunssfsi+0x3e>
 1ce:	e1 f0       	breq	.+56     	; 0x208 <__fixunssfsi+0x4c>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	88 1f       	adc	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	1a f0       	brmi	.+6      	; 0x1e0 <__fixunssfsi+0x24>
 1da:	ba 95       	dec	r27
 1dc:	c9 f7       	brne	.-14     	; 0x1d0 <__fixunssfsi+0x14>
 1de:	14 c0       	rjmp	.+40     	; 0x208 <__fixunssfsi+0x4c>
 1e0:	b1 30       	cpi	r27, 0x01	; 1
 1e2:	91 f0       	breq	.+36     	; 0x208 <__fixunssfsi+0x4c>
 1e4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__fp_zero>
 1e8:	b1 e0       	ldi	r27, 0x01	; 1
 1ea:	08 95       	ret
 1ec:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__fp_zero>
 1f0:	67 2f       	mov	r22, r23
 1f2:	78 2f       	mov	r23, r24
 1f4:	88 27       	eor	r24, r24
 1f6:	b8 5f       	subi	r27, 0xF8	; 248
 1f8:	39 f0       	breq	.+14     	; 0x208 <__fixunssfsi+0x4c>
 1fa:	b9 3f       	cpi	r27, 0xF9	; 249
 1fc:	cc f3       	brlt	.-14     	; 0x1f0 <__fixunssfsi+0x34>
 1fe:	86 95       	lsr	r24
 200:	77 95       	ror	r23
 202:	67 95       	ror	r22
 204:	b3 95       	inc	r27
 206:	d9 f7       	brne	.-10     	; 0x1fe <__fixunssfsi+0x42>
 208:	3e f4       	brtc	.+14     	; 0x218 <__fixunssfsi+0x5c>
 20a:	90 95       	com	r25
 20c:	80 95       	com	r24
 20e:	70 95       	com	r23
 210:	61 95       	neg	r22
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	8f 4f       	sbci	r24, 0xFF	; 255
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	08 95       	ret

0000021a <__floatunsisf>:
 21a:	e8 94       	clt
 21c:	09 c0       	rjmp	.+18     	; 0x230 <__floatsisf+0x12>

0000021e <__floatsisf>:
 21e:	97 fb       	bst	r25, 7
 220:	3e f4       	brtc	.+14     	; 0x230 <__floatsisf+0x12>
 222:	90 95       	com	r25
 224:	80 95       	com	r24
 226:	70 95       	com	r23
 228:	61 95       	neg	r22
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	8f 4f       	sbci	r24, 0xFF	; 255
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	99 23       	and	r25, r25
 232:	a9 f0       	breq	.+42     	; 0x25e <__floatsisf+0x40>
 234:	f9 2f       	mov	r31, r25
 236:	96 e9       	ldi	r25, 0x96	; 150
 238:	bb 27       	eor	r27, r27
 23a:	93 95       	inc	r25
 23c:	f6 95       	lsr	r31
 23e:	87 95       	ror	r24
 240:	77 95       	ror	r23
 242:	67 95       	ror	r22
 244:	b7 95       	ror	r27
 246:	f1 11       	cpse	r31, r1
 248:	f8 cf       	rjmp	.-16     	; 0x23a <__floatsisf+0x1c>
 24a:	fa f4       	brpl	.+62     	; 0x28a <__floatsisf+0x6c>
 24c:	bb 0f       	add	r27, r27
 24e:	11 f4       	brne	.+4      	; 0x254 <__floatsisf+0x36>
 250:	60 ff       	sbrs	r22, 0
 252:	1b c0       	rjmp	.+54     	; 0x28a <__floatsisf+0x6c>
 254:	6f 5f       	subi	r22, 0xFF	; 255
 256:	7f 4f       	sbci	r23, 0xFF	; 255
 258:	8f 4f       	sbci	r24, 0xFF	; 255
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	16 c0       	rjmp	.+44     	; 0x28a <__floatsisf+0x6c>
 25e:	88 23       	and	r24, r24
 260:	11 f0       	breq	.+4      	; 0x266 <__floatsisf+0x48>
 262:	96 e9       	ldi	r25, 0x96	; 150
 264:	11 c0       	rjmp	.+34     	; 0x288 <__floatsisf+0x6a>
 266:	77 23       	and	r23, r23
 268:	21 f0       	breq	.+8      	; 0x272 <__floatsisf+0x54>
 26a:	9e e8       	ldi	r25, 0x8E	; 142
 26c:	87 2f       	mov	r24, r23
 26e:	76 2f       	mov	r23, r22
 270:	05 c0       	rjmp	.+10     	; 0x27c <__floatsisf+0x5e>
 272:	66 23       	and	r22, r22
 274:	71 f0       	breq	.+28     	; 0x292 <__floatsisf+0x74>
 276:	96 e8       	ldi	r25, 0x86	; 134
 278:	86 2f       	mov	r24, r22
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	2a f0       	brmi	.+10     	; 0x28a <__floatsisf+0x6c>
 280:	9a 95       	dec	r25
 282:	66 0f       	add	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	88 1f       	adc	r24, r24
 288:	da f7       	brpl	.-10     	; 0x280 <__floatsisf+0x62>
 28a:	88 0f       	add	r24, r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	97 f9       	bld	r25, 7
 292:	08 95       	ret

00000294 <__fp_split3>:
 294:	57 fd       	sbrc	r21, 7
 296:	90 58       	subi	r25, 0x80	; 128
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	59 f0       	breq	.+22     	; 0x2b4 <__fp_splitA+0x10>
 29e:	5f 3f       	cpi	r21, 0xFF	; 255
 2a0:	71 f0       	breq	.+28     	; 0x2be <__fp_splitA+0x1a>
 2a2:	47 95       	ror	r20

000002a4 <__fp_splitA>:
 2a4:	88 0f       	add	r24, r24
 2a6:	97 fb       	bst	r25, 7
 2a8:	99 1f       	adc	r25, r25
 2aa:	61 f0       	breq	.+24     	; 0x2c4 <__fp_splitA+0x20>
 2ac:	9f 3f       	cpi	r25, 0xFF	; 255
 2ae:	79 f0       	breq	.+30     	; 0x2ce <__fp_splitA+0x2a>
 2b0:	87 95       	ror	r24
 2b2:	08 95       	ret
 2b4:	12 16       	cp	r1, r18
 2b6:	13 06       	cpc	r1, r19
 2b8:	14 06       	cpc	r1, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	f2 cf       	rjmp	.-28     	; 0x2a2 <__fp_split3+0xe>
 2be:	46 95       	lsr	r20
 2c0:	f1 df       	rcall	.-30     	; 0x2a4 <__fp_splitA>
 2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <__fp_splitA+0x30>
 2c4:	16 16       	cp	r1, r22
 2c6:	17 06       	cpc	r1, r23
 2c8:	18 06       	cpc	r1, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	f1 cf       	rjmp	.-30     	; 0x2b0 <__fp_splitA+0xc>
 2ce:	86 95       	lsr	r24
 2d0:	71 05       	cpc	r23, r1
 2d2:	61 05       	cpc	r22, r1
 2d4:	08 94       	sec
 2d6:	08 95       	ret

000002d8 <__fp_zero>:
 2d8:	e8 94       	clt

000002da <__fp_szero>:
 2da:	bb 27       	eor	r27, r27
 2dc:	66 27       	eor	r22, r22
 2de:	77 27       	eor	r23, r23
 2e0:	cb 01       	movw	r24, r22
 2e2:	97 f9       	bld	r25, 7
 2e4:	08 95       	ret

000002e6 <__mulsf3>:
 2e6:	0e 94 86 01 	call	0x30c	; 0x30c <__mulsf3x>
 2ea:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__fp_round>
 2ee:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fp_pscA>
 2f2:	38 f0       	brcs	.+14     	; 0x302 <__mulsf3+0x1c>
 2f4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__fp_pscB>
 2f8:	20 f0       	brcs	.+8      	; 0x302 <__mulsf3+0x1c>
 2fa:	95 23       	and	r25, r21
 2fc:	11 f0       	breq	.+4      	; 0x302 <__mulsf3+0x1c>
 2fe:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_inf>
 302:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_nan>
 306:	11 24       	eor	r1, r1
 308:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__fp_szero>

0000030c <__mulsf3x>:
 30c:	0e 94 4a 01 	call	0x294	; 0x294 <__fp_split3>
 310:	70 f3       	brcs	.-36     	; 0x2ee <__mulsf3+0x8>

00000312 <__mulsf3_pse>:
 312:	95 9f       	mul	r25, r21
 314:	c1 f3       	breq	.-16     	; 0x306 <__mulsf3+0x20>
 316:	95 0f       	add	r25, r21
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	55 1f       	adc	r21, r21
 31c:	62 9f       	mul	r22, r18
 31e:	f0 01       	movw	r30, r0
 320:	72 9f       	mul	r23, r18
 322:	bb 27       	eor	r27, r27
 324:	f0 0d       	add	r31, r0
 326:	b1 1d       	adc	r27, r1
 328:	63 9f       	mul	r22, r19
 32a:	aa 27       	eor	r26, r26
 32c:	f0 0d       	add	r31, r0
 32e:	b1 1d       	adc	r27, r1
 330:	aa 1f       	adc	r26, r26
 332:	64 9f       	mul	r22, r20
 334:	66 27       	eor	r22, r22
 336:	b0 0d       	add	r27, r0
 338:	a1 1d       	adc	r26, r1
 33a:	66 1f       	adc	r22, r22
 33c:	82 9f       	mul	r24, r18
 33e:	22 27       	eor	r18, r18
 340:	b0 0d       	add	r27, r0
 342:	a1 1d       	adc	r26, r1
 344:	62 1f       	adc	r22, r18
 346:	73 9f       	mul	r23, r19
 348:	b0 0d       	add	r27, r0
 34a:	a1 1d       	adc	r26, r1
 34c:	62 1f       	adc	r22, r18
 34e:	83 9f       	mul	r24, r19
 350:	a0 0d       	add	r26, r0
 352:	61 1d       	adc	r22, r1
 354:	22 1f       	adc	r18, r18
 356:	74 9f       	mul	r23, r20
 358:	33 27       	eor	r19, r19
 35a:	a0 0d       	add	r26, r0
 35c:	61 1d       	adc	r22, r1
 35e:	23 1f       	adc	r18, r19
 360:	84 9f       	mul	r24, r20
 362:	60 0d       	add	r22, r0
 364:	21 1d       	adc	r18, r1
 366:	82 2f       	mov	r24, r18
 368:	76 2f       	mov	r23, r22
 36a:	6a 2f       	mov	r22, r26
 36c:	11 24       	eor	r1, r1
 36e:	9f 57       	subi	r25, 0x7F	; 127
 370:	50 40       	sbci	r21, 0x00	; 0
 372:	9a f0       	brmi	.+38     	; 0x39a <__mulsf3_pse+0x88>
 374:	f1 f0       	breq	.+60     	; 0x3b2 <__mulsf3_pse+0xa0>
 376:	88 23       	and	r24, r24
 378:	4a f0       	brmi	.+18     	; 0x38c <__mulsf3_pse+0x7a>
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	bb 1f       	adc	r27, r27
 380:	66 1f       	adc	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	91 50       	subi	r25, 0x01	; 1
 388:	50 40       	sbci	r21, 0x00	; 0
 38a:	a9 f7       	brne	.-22     	; 0x376 <__mulsf3_pse+0x64>
 38c:	9e 3f       	cpi	r25, 0xFE	; 254
 38e:	51 05       	cpc	r21, r1
 390:	80 f0       	brcs	.+32     	; 0x3b2 <__mulsf3_pse+0xa0>
 392:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_inf>
 396:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__fp_szero>
 39a:	5f 3f       	cpi	r21, 0xFF	; 255
 39c:	e4 f3       	brlt	.-8      	; 0x396 <__mulsf3_pse+0x84>
 39e:	98 3e       	cpi	r25, 0xE8	; 232
 3a0:	d4 f3       	brlt	.-12     	; 0x396 <__mulsf3_pse+0x84>
 3a2:	86 95       	lsr	r24
 3a4:	77 95       	ror	r23
 3a6:	67 95       	ror	r22
 3a8:	b7 95       	ror	r27
 3aa:	f7 95       	ror	r31
 3ac:	e7 95       	ror	r30
 3ae:	9f 5f       	subi	r25, 0xFF	; 255
 3b0:	c1 f7       	brne	.-16     	; 0x3a2 <__mulsf3_pse+0x90>
 3b2:	fe 2b       	or	r31, r30
 3b4:	88 0f       	add	r24, r24
 3b6:	91 1d       	adc	r25, r1
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	97 f9       	bld	r25, 7
 3be:	08 95       	ret

000003c0 <__fp_inf>:
 3c0:	97 f9       	bld	r25, 7
 3c2:	9f 67       	ori	r25, 0x7F	; 127
 3c4:	80 e8       	ldi	r24, 0x80	; 128
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	08 95       	ret

000003cc <__fp_nan>:
 3cc:	9f ef       	ldi	r25, 0xFF	; 255
 3ce:	80 ec       	ldi	r24, 0xC0	; 192
 3d0:	08 95       	ret

000003d2 <__fp_pscA>:
 3d2:	00 24       	eor	r0, r0
 3d4:	0a 94       	dec	r0
 3d6:	16 16       	cp	r1, r22
 3d8:	17 06       	cpc	r1, r23
 3da:	18 06       	cpc	r1, r24
 3dc:	09 06       	cpc	r0, r25
 3de:	08 95       	ret

000003e0 <__fp_pscB>:
 3e0:	00 24       	eor	r0, r0
 3e2:	0a 94       	dec	r0
 3e4:	12 16       	cp	r1, r18
 3e6:	13 06       	cpc	r1, r19
 3e8:	14 06       	cpc	r1, r20
 3ea:	05 06       	cpc	r0, r21
 3ec:	08 95       	ret

000003ee <__fp_round>:
 3ee:	09 2e       	mov	r0, r25
 3f0:	03 94       	inc	r0
 3f2:	00 0c       	add	r0, r0
 3f4:	11 f4       	brne	.+4      	; 0x3fa <__fp_round+0xc>
 3f6:	88 23       	and	r24, r24
 3f8:	52 f0       	brmi	.+20     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fa:	bb 0f       	add	r27, r27
 3fc:	40 f4       	brcc	.+16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fe:	bf 2b       	or	r27, r31
 400:	11 f4       	brne	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	60 ff       	sbrs	r22, 0
 404:	04 c0       	rjmp	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 406:	6f 5f       	subi	r22, 0xFF	; 255
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__umulhisi3>:
 410:	a2 9f       	mul	r26, r18
 412:	b0 01       	movw	r22, r0
 414:	b3 9f       	mul	r27, r19
 416:	c0 01       	movw	r24, r0
 418:	a3 9f       	mul	r26, r19
 41a:	70 0d       	add	r23, r0
 41c:	81 1d       	adc	r24, r1
 41e:	11 24       	eor	r1, r1
 420:	91 1d       	adc	r25, r1
 422:	b2 9f       	mul	r27, r18
 424:	70 0d       	add	r23, r0
 426:	81 1d       	adc	r24, r1
 428:	11 24       	eor	r1, r1
 42a:	91 1d       	adc	r25, r1
 42c:	08 95       	ret

0000042e <itoa>:
 42e:	45 32       	cpi	r20, 0x25	; 37
 430:	51 05       	cpc	r21, r1
 432:	20 f4       	brcc	.+8      	; 0x43c <itoa+0xe>
 434:	42 30       	cpi	r20, 0x02	; 2
 436:	10 f0       	brcs	.+4      	; 0x43c <itoa+0xe>
 438:	0c 94 22 02 	jmp	0x444	; 0x444 <__itoa_ncheck>
 43c:	fb 01       	movw	r30, r22
 43e:	10 82       	st	Z, r1
 440:	cb 01       	movw	r24, r22
 442:	08 95       	ret

00000444 <__itoa_ncheck>:
 444:	bb 27       	eor	r27, r27
 446:	4a 30       	cpi	r20, 0x0A	; 10
 448:	31 f4       	brne	.+12     	; 0x456 <__itoa_ncheck+0x12>
 44a:	99 23       	and	r25, r25
 44c:	22 f4       	brpl	.+8      	; 0x456 <__itoa_ncheck+0x12>
 44e:	bd e2       	ldi	r27, 0x2D	; 45
 450:	90 95       	com	r25
 452:	81 95       	neg	r24
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__utoa_common>

0000045a <__utoa_ncheck>:
 45a:	bb 27       	eor	r27, r27

0000045c <__utoa_common>:
 45c:	fb 01       	movw	r30, r22
 45e:	55 27       	eor	r21, r21
 460:	aa 27       	eor	r26, r26
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	aa 1f       	adc	r26, r26
 468:	a4 17       	cp	r26, r20
 46a:	10 f0       	brcs	.+4      	; 0x470 <__utoa_common+0x14>
 46c:	a4 1b       	sub	r26, r20
 46e:	83 95       	inc	r24
 470:	50 51       	subi	r21, 0x10	; 16
 472:	b9 f7       	brne	.-18     	; 0x462 <__utoa_common+0x6>
 474:	a0 5d       	subi	r26, 0xD0	; 208
 476:	aa 33       	cpi	r26, 0x3A	; 58
 478:	08 f0       	brcs	.+2      	; 0x47c <__utoa_common+0x20>
 47a:	a9 5d       	subi	r26, 0xD9	; 217
 47c:	a1 93       	st	Z+, r26
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	79 f7       	brne	.-34     	; 0x460 <__utoa_common+0x4>
 482:	b1 11       	cpse	r27, r1
 484:	b1 93       	st	Z+, r27
 486:	11 92       	st	Z+, r1
 488:	cb 01       	movw	r24, r22
 48a:	0c 94 47 02 	jmp	0x48e	; 0x48e <strrev>

0000048e <strrev>:
 48e:	dc 01       	movw	r26, r24
 490:	fc 01       	movw	r30, r24
 492:	67 2f       	mov	r22, r23
 494:	71 91       	ld	r23, Z+
 496:	77 23       	and	r23, r23
 498:	e1 f7       	brne	.-8      	; 0x492 <strrev+0x4>
 49a:	32 97       	sbiw	r30, 0x02	; 2
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <strrev+0x18>
 49e:	7c 91       	ld	r23, X
 4a0:	6d 93       	st	X+, r22
 4a2:	70 83       	st	Z, r23
 4a4:	62 91       	ld	r22, -Z
 4a6:	ae 17       	cp	r26, r30
 4a8:	bf 07       	cpc	r27, r31
 4aa:	c8 f3       	brcs	.-14     	; 0x49e <strrev+0x10>
 4ac:	08 95       	ret

000004ae <_exit>:
 4ae:	f8 94       	cli

000004b0 <__stop_program>:
 4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <__stop_program>
