
Opdracht 4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000262  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a8  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ae  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000398  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f8  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  8e:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <leesADwaarde>:
#include <avr/io.h>
#include <util/delay.h>

int leesADwaarde(int analoogInput){
	int a;
	ADMUX &= 0xF0;
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	90 7f       	andi	r25, 0xF0	; 240
  9e:	90 83       	st	Z, r25
	ADMUX |= analoogInput; 
  a0:	90 81       	ld	r25, Z
  a2:	89 2b       	or	r24, r25
  a4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 65       	ori	r24, 0x50	; 80
  ae:	80 83       	st	Z, r24
	while(~ADCSRA & (1 << ADIF));
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	84 ff       	sbrs	r24, 4
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <leesADwaarde+0x1a>
	a = ADC; /* read ADC in */
  b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return a;
}
  c0:	08 95       	ret

000000c2 <initAD>:

void initAD()
{
	ADMUX |= (1 << REFS0) | (0 << ADLAR) | (1 << MUX2); /* reference voltage on AVCC */
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	84 64       	ori	r24, 0x44	; 68
  ca:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); /* ADC clock prescaler /128 */
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); /* enable ADC */
  d6:	80 81       	ld	r24, Z
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <initUsart>:
}

void initUsart()
{
	UCSR0A = 0;
  de:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Enable de USART Transmitter and Receiver */
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H=00;
  ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103; /* baudrade 9600 */
  f2:	87 e6       	ldi	r24, 0x67	; 103
  f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  f8:	08 95       	ret

000000fa <writeChar>:
	
}

void writeChar(char x)
{
	while (~UCSR0A & (1 << UDRE0));
  fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fe:	95 ff       	sbrs	r25, 5
 100:	fc cf       	rjmp	.-8      	; 0xfa <writeChar>
	UDR0 = x;
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 106:	08 95       	ret

00000108 <writeString>:
}

void writeString(char st[])
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	03 c0       	rjmp	.+6      	; 0x11a <writeString+0x12>
	writeChar(st[i]);
 114:	0e 94 7d 00 	call	0xfa	; 0xfa <writeChar>
	UDR0 = x;
}

void writeString(char st[])
{
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	f8 01       	movw	r30, r16
 11c:	ec 0f       	add	r30, r28
 11e:	f1 1d       	adc	r31, r1
 120:	80 81       	ld	r24, Z
 122:	81 11       	cpse	r24, r1
 124:	f7 cf       	rjmp	.-18     	; 0x114 <writeString+0xc>
	writeChar(st[i]);
}
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <writeInt>:

void writeInt(int i)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	28 97       	sbiw	r28, 0x08	; 8
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	itoa(i,buffer,10);
 142:	4a e0       	ldi	r20, 0x0A	; 10
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	be 01       	movw	r22, r28
 148:	6f 5f       	subi	r22, 0xFF	; 255
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	0e 94 ef 00 	call	0x1de	; 0x1de <itoa>
	writeString(buffer);
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
}
 158:	28 96       	adiw	r28, 0x08	; 8
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <main>:
int main(void) {

	
	uint16_t ADCwaarde;
	uint16_t LDRwaarde;
	initAD();
 16a:	0e 94 61 00 	call	0xc2	; 0xc2 <initAD>
	initUsart();
 16e:	0e 94 6f 00 	call	0xde	; 0xde <initUsart>
	DDRB=0x10;
 172:	80 e1       	ldi	r24, 0x10	; 16
 174:	84 b9       	out	0x04, r24	; 4

	// ------ Event loop ------ //
	while (1) {
		
		ADCwaarde = leesADwaarde(4);
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 4b 00 	call	0x96	; 0x96 <leesADwaarde>
 17e:	8c 01       	movw	r16, r24
		
		writeString("P: ");
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
		writeInt(ADCwaarde);
 188:	c8 01       	movw	r24, r16
 18a:	0e 94 97 00 	call	0x12e	; 0x12e <writeInt>
		writeString("\n\r");
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
		
		LDRwaarde = leesADwaarde(5);
 196:	85 e0       	ldi	r24, 0x05	; 5
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <leesADwaarde>
 19e:	ec 01       	movw	r28, r24
		writeString("LDR: ");
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
		writeInt(LDRwaarde);
 1a8:	ce 01       	movw	r24, r28
 1aa:	0e 94 97 00 	call	0x12e	; 0x12e <writeInt>
		writeString("\n\r");
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 84 00 	call	0x108	; 0x108 <writeString>
		
		if(LDRwaarde > ADCwaarde )
 1b6:	0c 17       	cp	r16, r28
 1b8:	1d 07       	cpc	r17, r29
 1ba:	20 f4       	brcc	.+8      	; 0x1c4 <main+0x5a>
		PORTB |=(1 << PORTB4);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <main+0x60>

		else
		PORTB &= ~(1 << PORTB4);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8f 7e       	andi	r24, 0xEF	; 239
 1c8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	84 e3       	ldi	r24, 0x34	; 52
 1ce:	9c e0       	ldi	r25, 0x0C	; 12
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x66>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x70>
 1da:	00 00       	nop
 1dc:	cc cf       	rjmp	.-104    	; 0x176 <main+0xc>

000001de <itoa>:
 1de:	45 32       	cpi	r20, 0x25	; 37
 1e0:	51 05       	cpc	r21, r1
 1e2:	20 f4       	brcc	.+8      	; 0x1ec <itoa+0xe>
 1e4:	42 30       	cpi	r20, 0x02	; 2
 1e6:	10 f0       	brcs	.+4      	; 0x1ec <itoa+0xe>
 1e8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__itoa_ncheck>
 1ec:	fb 01       	movw	r30, r22
 1ee:	10 82       	st	Z, r1
 1f0:	cb 01       	movw	r24, r22
 1f2:	08 95       	ret

000001f4 <__itoa_ncheck>:
 1f4:	bb 27       	eor	r27, r27
 1f6:	4a 30       	cpi	r20, 0x0A	; 10
 1f8:	31 f4       	brne	.+12     	; 0x206 <__itoa_ncheck+0x12>
 1fa:	99 23       	and	r25, r25
 1fc:	22 f4       	brpl	.+8      	; 0x206 <__itoa_ncheck+0x12>
 1fe:	bd e2       	ldi	r27, 0x2D	; 45
 200:	90 95       	com	r25
 202:	81 95       	neg	r24
 204:	9f 4f       	sbci	r25, 0xFF	; 255
 206:	0c 94 06 01 	jmp	0x20c	; 0x20c <__utoa_common>

0000020a <__utoa_ncheck>:
 20a:	bb 27       	eor	r27, r27

0000020c <__utoa_common>:
 20c:	fb 01       	movw	r30, r22
 20e:	55 27       	eor	r21, r21
 210:	aa 27       	eor	r26, r26
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	aa 1f       	adc	r26, r26
 218:	a4 17       	cp	r26, r20
 21a:	10 f0       	brcs	.+4      	; 0x220 <__utoa_common+0x14>
 21c:	a4 1b       	sub	r26, r20
 21e:	83 95       	inc	r24
 220:	50 51       	subi	r21, 0x10	; 16
 222:	b9 f7       	brne	.-18     	; 0x212 <__utoa_common+0x6>
 224:	a0 5d       	subi	r26, 0xD0	; 208
 226:	aa 33       	cpi	r26, 0x3A	; 58
 228:	08 f0       	brcs	.+2      	; 0x22c <__utoa_common+0x20>
 22a:	a9 5d       	subi	r26, 0xD9	; 217
 22c:	a1 93       	st	Z+, r26
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	79 f7       	brne	.-34     	; 0x210 <__utoa_common+0x4>
 232:	b1 11       	cpse	r27, r1
 234:	b1 93       	st	Z+, r27
 236:	11 92       	st	Z+, r1
 238:	cb 01       	movw	r24, r22
 23a:	0c 94 1f 01 	jmp	0x23e	; 0x23e <strrev>

0000023e <strrev>:
 23e:	dc 01       	movw	r26, r24
 240:	fc 01       	movw	r30, r24
 242:	67 2f       	mov	r22, r23
 244:	71 91       	ld	r23, Z+
 246:	77 23       	and	r23, r23
 248:	e1 f7       	brne	.-8      	; 0x242 <strrev+0x4>
 24a:	32 97       	sbiw	r30, 0x02	; 2
 24c:	04 c0       	rjmp	.+8      	; 0x256 <strrev+0x18>
 24e:	7c 91       	ld	r23, X
 250:	6d 93       	st	X+, r22
 252:	70 83       	st	Z, r23
 254:	62 91       	ld	r22, -Z
 256:	ae 17       	cp	r26, r30
 258:	bf 07       	cpc	r27, r31
 25a:	c8 f3       	brcs	.-14     	; 0x24e <strrev+0x10>
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
