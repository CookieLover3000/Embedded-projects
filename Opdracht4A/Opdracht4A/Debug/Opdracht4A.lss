
Opdracht4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000226  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a2  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078c  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  00001b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUsart>:
#define WAARDE1 400
volatile int a;

void initUsart()
{
	UCSR0A = 0;
  a6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Enable de USART Transmitter and Receiver */
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H=00;
  b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103; /* baudrade 9600 */
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c0:	08 95       	ret

000000c2 <writeChar>:
}

void writeChar(char x) 
{
	while (~UCSR0A & (1 << UDRE0));
  c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c6:	95 ff       	sbrs	r25, 5
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <writeChar>
	UDR0 = x;
  ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ce:	08 95       	ret

000000d0 <writeString>:
}

void writeString(char st[]) 
{
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	03 c0       	rjmp	.+6      	; 0xe2 <writeString+0x12>
		writeChar(st[i]);
  dc:	0e 94 61 00 	call	0xc2	; 0xc2 <writeChar>
	UDR0 = x;
}

void writeString(char st[]) 
{
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  e0:	cf 5f       	subi	r28, 0xFF	; 255
  e2:	f8 01       	movw	r30, r16
  e4:	ec 0f       	add	r30, r28
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <writeString+0xc>
		writeChar(st[i]);
}
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <writeInt>:

void writeInt(int i) 
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	28 97       	sbiw	r28, 0x08	; 8
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	itoa(i,buffer,10);
 10a:	4a e0       	ldi	r20, 0x0A	; 10
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	be 01       	movw	r22, r28
 110:	6f 5f       	subi	r22, 0xFF	; 255
 112:	7f 4f       	sbci	r23, 0xFF	; 255
 114:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <itoa>
	writeString(buffer);
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 68 00 	call	0xd0	; 0xd0 <writeString>
}
 120:	28 96       	adiw	r28, 0x08	; 8
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <main>:

#define WAARDE1 200

int main(void) {
	
	initUsart();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <initUsart>

	uint16_t adcValue;
	DDRB=0x10;
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	84 b9       	out	0x04, r24	; 4
	ADMUX |= (1 << REFS0) | (1 << MUX2); /* reference voltage on AVCC */
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	84 64       	ori	r24, 0x44	; 68
 142:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); /* ADC clock prescaler /128 */
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	87 60       	ori	r24, 0x07	; 7
 14c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); /* enable ADC */
 14e:	80 81       	ld	r24, Z
 150:	80 68       	ori	r24, 0x80	; 128
 152:	80 83       	st	Z, r24

	// ------ Event loop ------ //
	while (1) {

		ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 65       	ori	r24, 0x50	; 80
 15c:	80 83       	st	Z, r24
		while(~ADCSRA & (1 << ADIF));
 15e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 162:	84 ff       	sbrs	r24, 4
 164:	fc cf       	rjmp	.-8      	; 0x15e <main+0x2c>
		adcValue = ADC; /* read ADC in */
 166:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 16a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

		if(adcValue > WAARDE1 )
 16e:	89 3c       	cpi	r24, 0xC9	; 201
 170:	91 05       	cpc	r25, r1
 172:	20 f0       	brcs	.+8      	; 0x17c <main+0x4a>
		PORTB |=(1 << PORTB4);
 174:	25 b1       	in	r18, 0x05	; 5
 176:	20 61       	ori	r18, 0x10	; 16
 178:	25 b9       	out	0x05, r18	; 5
 17a:	03 c0       	rjmp	.+6      	; 0x182 <main+0x50>

		else
		PORTB &= ~(1 << PORTB4);
 17c:	25 b1       	in	r18, 0x05	; 5
 17e:	2f 7e       	andi	r18, 0xEF	; 239
 180:	25 b9       	out	0x05, r18	; 5
		
		writeInt(adcValue);
 182:	0e 94 7b 00 	call	0xf6	; 0xf6 <writeInt>
		writeString("\n\r");
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 68 00 	call	0xd0	; 0xd0 <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	84 e3       	ldi	r24, 0x34	; 52
 192:	9c e0       	ldi	r25, 0x0C	; 12
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x62>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x6c>
 19e:	00 00       	nop
 1a0:	d9 cf       	rjmp	.-78     	; 0x154 <main+0x22>

000001a2 <itoa>:
 1a2:	45 32       	cpi	r20, 0x25	; 37
 1a4:	51 05       	cpc	r21, r1
 1a6:	20 f4       	brcc	.+8      	; 0x1b0 <itoa+0xe>
 1a8:	42 30       	cpi	r20, 0x02	; 2
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <itoa+0xe>
 1ac:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__itoa_ncheck>
 1b0:	fb 01       	movw	r30, r22
 1b2:	10 82       	st	Z, r1
 1b4:	cb 01       	movw	r24, r22
 1b6:	08 95       	ret

000001b8 <__itoa_ncheck>:
 1b8:	bb 27       	eor	r27, r27
 1ba:	4a 30       	cpi	r20, 0x0A	; 10
 1bc:	31 f4       	brne	.+12     	; 0x1ca <__itoa_ncheck+0x12>
 1be:	99 23       	and	r25, r25
 1c0:	22 f4       	brpl	.+8      	; 0x1ca <__itoa_ncheck+0x12>
 1c2:	bd e2       	ldi	r27, 0x2D	; 45
 1c4:	90 95       	com	r25
 1c6:	81 95       	neg	r24
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__utoa_common>

000001ce <__utoa_ncheck>:
 1ce:	bb 27       	eor	r27, r27

000001d0 <__utoa_common>:
 1d0:	fb 01       	movw	r30, r22
 1d2:	55 27       	eor	r21, r21
 1d4:	aa 27       	eor	r26, r26
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	aa 1f       	adc	r26, r26
 1dc:	a4 17       	cp	r26, r20
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <__utoa_common+0x14>
 1e0:	a4 1b       	sub	r26, r20
 1e2:	83 95       	inc	r24
 1e4:	50 51       	subi	r21, 0x10	; 16
 1e6:	b9 f7       	brne	.-18     	; 0x1d6 <__utoa_common+0x6>
 1e8:	a0 5d       	subi	r26, 0xD0	; 208
 1ea:	aa 33       	cpi	r26, 0x3A	; 58
 1ec:	08 f0       	brcs	.+2      	; 0x1f0 <__utoa_common+0x20>
 1ee:	a9 5d       	subi	r26, 0xD9	; 217
 1f0:	a1 93       	st	Z+, r26
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	79 f7       	brne	.-34     	; 0x1d4 <__utoa_common+0x4>
 1f6:	b1 11       	cpse	r27, r1
 1f8:	b1 93       	st	Z+, r27
 1fa:	11 92       	st	Z+, r1
 1fc:	cb 01       	movw	r24, r22
 1fe:	0c 94 01 01 	jmp	0x202	; 0x202 <strrev>

00000202 <strrev>:
 202:	dc 01       	movw	r26, r24
 204:	fc 01       	movw	r30, r24
 206:	67 2f       	mov	r22, r23
 208:	71 91       	ld	r23, Z+
 20a:	77 23       	and	r23, r23
 20c:	e1 f7       	brne	.-8      	; 0x206 <strrev+0x4>
 20e:	32 97       	sbiw	r30, 0x02	; 2
 210:	04 c0       	rjmp	.+8      	; 0x21a <strrev+0x18>
 212:	7c 91       	ld	r23, X
 214:	6d 93       	st	X+, r22
 216:	70 83       	st	Z, r23
 218:	62 91       	ld	r22, -Z
 21a:	ae 17       	cp	r26, r30
 21c:	bf 07       	cpc	r27, r31
 21e:	c8 f3       	brcs	.-14     	; 0x212 <strrev+0x10>
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
