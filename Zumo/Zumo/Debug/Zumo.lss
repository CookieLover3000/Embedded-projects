
Zumo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000cde  00000d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800160  00800160  00000dd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c40  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c91  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf8  00000000  00000000  0000387d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00004578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ec  00000000  00000000  000049c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb9  00000000  00000000  000051b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005e69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  24:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_9>
  28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  48:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  4c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  58:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  5c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  60:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  64:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_25>
  68:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  6c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  70:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  74:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  78:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  7c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  80:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  84:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  88:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  8c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  90:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  94:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  98:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  9c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  a0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  a4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  a8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  ac:	f1 03       	fmuls	r23, r17
  ae:	fa 03       	fmulsu	r23, r18
  b0:	03 04       	cpc	r0, r3
  b2:	0c 04       	cpc	r0, r12
  b4:	50 04       	cpc	r5, r0
  b6:	50 04       	cpc	r5, r0
  b8:	50 04       	cpc	r5, r0
  ba:	50 04       	cpc	r5, r0
  bc:	50 04       	cpc	r5, r0
  be:	50 04       	cpc	r5, r0
  c0:	50 04       	cpc	r5, r0
  c2:	50 04       	cpc	r5, r0
  c4:	50 04       	cpc	r5, r0
  c6:	50 04       	cpc	r5, r0
  c8:	50 04       	cpc	r5, r0
  ca:	50 04       	cpc	r5, r0
  cc:	19 04       	cpc	r1, r9
  ce:	50 04       	cpc	r5, r0
  d0:	50 04       	cpc	r5, r0
  d2:	34 04       	cpc	r3, r4
  d4:	50 04       	cpc	r5, r0
  d6:	50 04       	cpc	r5, r0
  d8:	50 04       	cpc	r5, r0
  da:	1d 04       	cpc	r1, r13
  dc:	eb 03       	fmulsu	r22, r19
  de:	50 04       	cpc	r5, r0
  e0:	38 04       	cpc	r3, r8
  e2:	50 04       	cpc	r5, r0
  e4:	50 04       	cpc	r5, r0
  e6:	50 04       	cpc	r5, r0
  e8:	ee 03       	fmulsu	r22, r22
  ea:	50 04       	cpc	r5, r0
  ec:	50 04       	cpc	r5, r0
  ee:	50 04       	cpc	r5, r0
  f0:	30 04       	cpc	r3, r0
  f2:	4b 04       	cpc	r4, r11
  f4:	50 04       	cpc	r5, r0
  f6:	50 04       	cpc	r5, r0
  f8:	15 04       	cpc	r1, r5
  fa:	50 04       	cpc	r5, r0
  fc:	50 04       	cpc	r5, r0
  fe:	50 04       	cpc	r5, r0
 100:	50 04       	cpc	r5, r0
 102:	50 04       	cpc	r5, r0
 104:	50 04       	cpc	r5, r0
 106:	50 04       	cpc	r5, r0
 108:	50 04       	cpc	r5, r0
 10a:	50 04       	cpc	r5, r0
 10c:	19 04       	cpc	r1, r9
 10e:	50 04       	cpc	r5, r0
 110:	50 04       	cpc	r5, r0
 112:	34 04       	cpc	r3, r4
 114:	50 04       	cpc	r5, r0
 116:	50 04       	cpc	r5, r0
 118:	50 04       	cpc	r5, r0
 11a:	1d 04       	cpc	r1, r13
 11c:	eb 03       	fmulsu	r22, r19
 11e:	50 04       	cpc	r5, r0
 120:	38 04       	cpc	r3, r8
 122:	50 04       	cpc	r5, r0
 124:	50 04       	cpc	r5, r0
 126:	50 04       	cpc	r5, r0
 128:	ee 03       	fmulsu	r22, r22
 12a:	50 04       	cpc	r5, r0
 12c:	50 04       	cpc	r5, r0
 12e:	50 04       	cpc	r5, r0
 130:	30 04       	cpc	r3, r0
 132:	4b 04       	cpc	r4, r11
 134:	50 04       	cpc	r5, r0
 136:	50 04       	cpc	r5, r0
 138:	15 04       	cpc	r1, r5

0000013a <__ctors_end>:
 13a:	11 24       	eor	r1, r1
 13c:	1f be       	out	0x3f, r1	; 63
 13e:	cf ef       	ldi	r28, 0xFF	; 255
 140:	da e0       	ldi	r29, 0x0A	; 10
 142:	de bf       	out	0x3e, r29	; 62
 144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
 146:	11 e0       	ldi	r17, 0x01	; 1
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b1 e0       	ldi	r27, 0x01	; 1
 14c:	ee ed       	ldi	r30, 0xDE	; 222
 14e:	fc e0       	ldi	r31, 0x0C	; 12
 150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
 152:	05 90       	lpm	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	a0 36       	cpi	r26, 0x60	; 96
 158:	b1 07       	cpc	r27, r17
 15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	a0 e6       	ldi	r26, 0x60	; 96
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
 164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
 166:	af 36       	cpi	r26, 0x6F	; 111
 168:	b2 07       	cpc	r27, r18
 16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
 16c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <main>
 170:	0c 94 6d 06 	jmp	0xcda	; 0xcda <_exit>

00000174 <__bad_interrupt>:
 174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <snelheidMotors>:
// Zet de Proximity Led PWM uit
void PWM_LED_OFF(){

DDRC &= ~(PROX_LED_PWM);
PORTC &= ~(PROX_LED_PWM); 
TCCR3B &= ~((1 << CS30) | (1 << CS31) | (1 << CS32));
 178:	20 e6       	ldi	r18, 0x60	; 96
 17a:	24 b9       	out	0x04, r18	; 4
 17c:	23 ea       	ldi	r18, 0xA3	; 163
 17e:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 182:	29 e0       	ldi	r18, 0x09	; 9
 184:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 188:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 18c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 190:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 194:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 198:	08 95       	ret

0000019a <zetMotorsAan>:
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <snelheid>
 19e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <snelheid+0x1>
 1a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <snelheid>
 1ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <snelheid+0x1>
 1b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1ba:	08 95       	ret

000001bc <zetMotorsUit>:
 1bc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1c4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1c8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1cc:	08 95       	ret

000001ce <LeftRight>:
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
 1d2:	0e 94 cd 00 	call	0x19a	; 0x19a <zetMotorsAan>
 1d6:	c3 30       	cpi	r28, 0x03	; 3
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <LeftRight+0x1a>
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	85 b9       	out	0x05, r24	; 5
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <LeftRight+0x26>
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	85 b9       	out	0x05, r24	; 5
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8d 7f       	andi	r24, 0xFD	; 253
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <richtingMotors>:
 1f8:	cf 93       	push	r28
 1fa:	c8 2f       	mov	r28, r24
 1fc:	0e 94 cd 00 	call	0x19a	; 0x19a <zetMotorsAan>
 200:	c1 30       	cpi	r28, 0x01	; 1
 202:	21 f4       	brne	.+8      	; 0x20c <richtingMotors+0x14>
 204:	85 b1       	in	r24, 0x05	; 5
 206:	86 60       	ori	r24, 0x06	; 6
 208:	85 b9       	out	0x05, r24	; 5
 20a:	03 c0       	rjmp	.+6      	; 0x212 <richtingMotors+0x1a>
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	89 7f       	andi	r24, 0xF9	; 249
 210:	85 b9       	out	0x05, r24	; 5
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <initI2C>:
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	83 60       	ori	r24, 0x03	; 3
 21a:	8b b9       	out	0x0b, r24	; 11
 21c:	88 e4       	ldi	r24, 0x48	; 72
 21e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 222:	ec eb       	ldi	r30, 0xBC	; 188
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	80 83       	st	Z, r24
 22c:	08 95       	ret

0000022e <i2cWaitForComplete>:
 22e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 232:	88 23       	and	r24, r24
 234:	e4 f7       	brge	.-8      	; 0x22e <i2cWaitForComplete>
 236:	08 95       	ret

00000238 <i2cStart>:
 238:	84 ea       	ldi	r24, 0xA4	; 164
 23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23e:	0e 94 17 01 	call	0x22e	; 0x22e <i2cWaitForComplete>
 242:	08 95       	ret

00000244 <i2cStop>:
 244:	84 e9       	ldi	r24, 0x94	; 148
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24e:	84 fd       	sbrc	r24, 4
 250:	fc cf       	rjmp	.-8      	; 0x24a <i2cStop+0x6>
 252:	08 95       	ret

00000254 <i2cReadNoAck>:
 254:	84 e8       	ldi	r24, 0x84	; 132
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25a:	0e 94 17 01 	call	0x22e	; 0x22e <i2cWaitForComplete>
 25e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 262:	08 95       	ret

00000264 <i2cSend>:
 264:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 268:	84 e8       	ldi	r24, 0x84	; 132
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26e:	0e 94 17 01 	call	0x22e	; 0x22e <i2cWaitForComplete>
 272:	08 95       	ret

00000274 <readXL>:
 274:	cf 93       	push	r28
 276:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 27a:	8a e3       	ldi	r24, 0x3A	; 58
 27c:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 280:	88 e8       	ldi	r24, 0x88	; 136
 282:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 286:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 28a:	8b e3       	ldi	r24, 0x3B	; 59
 28c:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 290:	0e 94 2a 01 	call	0x254	; 0x254 <i2cReadNoAck>
 294:	c8 2f       	mov	r28, r24
 296:	0e 94 22 01 	call	0x244	; 0x244 <i2cStop>
 29a:	8c 2f       	mov	r24, r28
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <readXH>:
 2a0:	cf 93       	push	r28
 2a2:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 2a6:	8a e3       	ldi	r24, 0x3A	; 58
 2a8:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 2ac:	89 e8       	ldi	r24, 0x89	; 137
 2ae:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 2b2:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 2b6:	8b e3       	ldi	r24, 0x3B	; 59
 2b8:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 2bc:	0e 94 2a 01 	call	0x254	; 0x254 <i2cReadNoAck>
 2c0:	c8 2f       	mov	r28, r24
 2c2:	0e 94 22 01 	call	0x244	; 0x244 <i2cStop>
 2c6:	8c 2f       	mov	r24, r28
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <readYL>:
 2cc:	cf 93       	push	r28
 2ce:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 2d2:	8a e3       	ldi	r24, 0x3A	; 58
 2d4:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 2d8:	8a e8       	ldi	r24, 0x8A	; 138
 2da:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 2de:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 2e2:	8b e3       	ldi	r24, 0x3B	; 59
 2e4:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 2e8:	0e 94 2a 01 	call	0x254	; 0x254 <i2cReadNoAck>
 2ec:	c8 2f       	mov	r28, r24
 2ee:	0e 94 22 01 	call	0x244	; 0x244 <i2cStop>
 2f2:	8c 2f       	mov	r24, r28
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <readYH>:
 2f8:	cf 93       	push	r28
 2fa:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 2fe:	8a e3       	ldi	r24, 0x3A	; 58
 300:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 304:	8b e8       	ldi	r24, 0x8B	; 139
 306:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 30a:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 30e:	8b e3       	ldi	r24, 0x3B	; 59
 310:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 314:	0e 94 2a 01 	call	0x254	; 0x254 <i2cReadNoAck>
 318:	c8 2f       	mov	r28, r24
 31a:	0e 94 22 01 	call	0x244	; 0x244 <i2cStop>
 31e:	8c 2f       	mov	r24, r28
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <readZL>:
 324:	cf 93       	push	r28
 326:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 32a:	8a e3       	ldi	r24, 0x3A	; 58
 32c:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 330:	8c e8       	ldi	r24, 0x8C	; 140
 332:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 336:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 33a:	8b e3       	ldi	r24, 0x3B	; 59
 33c:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 340:	0e 94 2a 01 	call	0x254	; 0x254 <i2cReadNoAck>
 344:	c8 2f       	mov	r28, r24
 346:	0e 94 22 01 	call	0x244	; 0x244 <i2cStop>
 34a:	8c 2f       	mov	r24, r28
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <readZH>:
 350:	cf 93       	push	r28
 352:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 356:	8a e3       	ldi	r24, 0x3A	; 58
 358:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 35c:	8d e8       	ldi	r24, 0x8D	; 141
 35e:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 362:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 366:	8b e3       	ldi	r24, 0x3B	; 59
 368:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 36c:	0e 94 2a 01 	call	0x254	; 0x254 <i2cReadNoAck>
 370:	c8 2f       	mov	r28, r24
 372:	0e 94 22 01 	call	0x244	; 0x244 <i2cStop>
 376:	8c 2f       	mov	r24, r28
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <setRegister>:
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	d8 2f       	mov	r29, r24
 382:	c6 2f       	mov	r28, r22
 384:	0e 94 1c 01 	call	0x238	; 0x238 <i2cStart>
 388:	8a e3       	ldi	r24, 0x3A	; 58
 38a:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 38e:	8d 2f       	mov	r24, r29
 390:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 32 01 	call	0x264	; 0x264 <i2cSend>
 39a:	0e 94 22 01 	call	0x244	; 0x244 <i2cStop>
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <USART_init>:
 3a4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 3a8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 3ac:	e9 ec       	ldi	r30, 0xC9	; 201
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	88 e1       	ldi	r24, 0x18	; 24
 3b2:	80 83       	st	Z, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	80 83       	st	Z, r24
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 3c0:	08 95       	ret

000003c2 <writeChar>:
 3c2:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 3c6:	95 ff       	sbrs	r25, 5
 3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <writeChar>
 3ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 3ce:	08 95       	ret

000003d0 <writeString>:
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	8c 01       	movw	r16, r24
 3d8:	c0 e0       	ldi	r28, 0x00	; 0
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <writeString+0x12>
 3dc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <writeChar>
 3e0:	cf 5f       	subi	r28, 0xFF	; 255
 3e2:	f8 01       	movw	r30, r16
 3e4:	ec 0f       	add	r30, r28
 3e6:	f1 1d       	adc	r31, r1
 3e8:	80 81       	ld	r24, Z
 3ea:	81 11       	cpse	r24, r1
 3ec:	f7 cf       	rjmp	.-18     	; 0x3dc <writeString+0xc>
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <writeUnt>:
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ec 01       	movw	r28, r24
 3fc:	8a 30       	cpi	r24, 0x0A	; 10
 3fe:	91 05       	cpc	r25, r1
 400:	68 f0       	brcs	.+26     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 402:	9c 01       	movw	r18, r24
 404:	ad ec       	ldi	r26, 0xCD	; 205
 406:	bc ec       	ldi	r27, 0xCC	; 204
 408:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__umulhisi3>
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <writeUnt>
 41c:	9e 01       	movw	r18, r28
 41e:	ad ec       	ldi	r26, 0xCD	; 205
 420:	bc ec       	ldi	r27, 0xCC	; 204
 422:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__umulhisi3>
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	96 95       	lsr	r25
 42c:	87 95       	ror	r24
 42e:	96 95       	lsr	r25
 430:	87 95       	ror	r24
 432:	9c 01       	movw	r18, r24
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	82 0f       	add	r24, r18
 446:	93 1f       	adc	r25, r19
 448:	9e 01       	movw	r18, r28
 44a:	28 1b       	sub	r18, r24
 44c:	39 0b       	sbc	r19, r25
 44e:	c9 01       	movw	r24, r18
 450:	80 5d       	subi	r24, 0xD0	; 208
 452:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <writeChar>
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <printDirection>:
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	6f e7       	ldi	r22, 0x7F	; 127
 464:	80 e2       	ldi	r24, 0x20	; 32
 466:	0e 94 be 01 	call	0x37c	; 0x37c <setRegister>
 46a:	0e 94 3a 01 	call	0x274	; 0x274 <readXL>
 46e:	18 2f       	mov	r17, r24
 470:	6f e7       	ldi	r22, 0x7F	; 127
 472:	80 e2       	ldi	r24, 0x20	; 32
 474:	0e 94 be 01 	call	0x37c	; 0x37c <setRegister>
 478:	0e 94 50 01 	call	0x2a0	; 0x2a0 <readXH>
 47c:	c8 2f       	mov	r28, r24
 47e:	d0 e0       	ldi	r29, 0x00	; 0
 480:	dc 2f       	mov	r29, r28
 482:	cc 27       	eor	r28, r28
 484:	c1 2b       	or	r28, r17
 486:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <xOff>
 48a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <xOff+0x1>
 48e:	c8 1b       	sub	r28, r24
 490:	d9 0b       	sbc	r29, r25
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 49a:	ce 01       	movw	r24, r28
 49c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <writeUnt>
 4a0:	8a e2       	ldi	r24, 0x2A	; 42
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 4a8:	6f e7       	ldi	r22, 0x7F	; 127
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	0e 94 be 01 	call	0x37c	; 0x37c <setRegister>
 4b0:	0e 94 66 01 	call	0x2cc	; 0x2cc <readYL>
 4b4:	18 2f       	mov	r17, r24
 4b6:	6f e7       	ldi	r22, 0x7F	; 127
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	0e 94 be 01 	call	0x37c	; 0x37c <setRegister>
 4be:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <readYH>
 4c2:	c8 2f       	mov	r28, r24
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
 4c6:	dc 2f       	mov	r29, r28
 4c8:	cc 27       	eor	r28, r28
 4ca:	c1 2b       	or	r28, r17
 4cc:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <yOff>
 4d0:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <yOff+0x1>
 4d4:	c8 1b       	sub	r28, r24
 4d6:	d9 0b       	sbc	r29, r25
 4d8:	88 e0       	ldi	r24, 0x08	; 8
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 4e0:	ce 01       	movw	r24, r28
 4e2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <writeUnt>
 4e6:	8a e2       	ldi	r24, 0x2A	; 42
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 4ee:	6f e7       	ldi	r22, 0x7F	; 127
 4f0:	80 e2       	ldi	r24, 0x20	; 32
 4f2:	0e 94 be 01 	call	0x37c	; 0x37c <setRegister>
 4f6:	0e 94 92 01 	call	0x324	; 0x324 <readZL>
 4fa:	18 2f       	mov	r17, r24
 4fc:	6f e7       	ldi	r22, 0x7F	; 127
 4fe:	80 e2       	ldi	r24, 0x20	; 32
 500:	0e 94 be 01 	call	0x37c	; 0x37c <setRegister>
 504:	0e 94 a8 01 	call	0x350	; 0x350 <readZH>
 508:	c8 2f       	mov	r28, r24
 50a:	d0 e0       	ldi	r29, 0x00	; 0
 50c:	dc 2f       	mov	r29, r28
 50e:	cc 27       	eor	r28, r28
 510:	c1 2b       	or	r28, r17
 512:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <zOff>
 516:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <zOff+0x1>
 51a:	c8 1b       	sub	r28, r24
 51c:	d9 0b       	sbc	r29, r25
 51e:	8c e0       	ldi	r24, 0x0C	; 12
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 526:	ce 01       	movw	r24, r28
 528:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <writeUnt>
 52c:	8e e2       	ldi	r24, 0x2E	; 46
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 534:	8e e2       	ldi	r24, 0x2E	; 46
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	08 95       	ret

00000544 <printDistance>:
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	ec 01       	movw	r28, r24
 54a:	80 e1       	ldi	r24, 0x10	; 16
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 552:	ce 01       	movw	r24, r28
 554:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <writeUnt>
 558:	8c e2       	ldi	r24, 0x2C	; 44
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 560:	81 e3       	ldi	r24, 0x31	; 49
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 568:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 56c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 570:	ce 01       	movw	r24, r28
 572:	0e 94 44 06 	call	0xc88	; 0xc88 <__udivmodhi4>
 576:	cb 01       	movw	r24, r22
 578:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <writeUnt>
 57c:	8d e4       	ldi	r24, 0x4D	; 77
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
 584:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 588:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 592:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <printAll>:
 59c:	0e 94 a2 02 	call	0x544	; 0x544 <printDistance>
 5a0:	0e 94 2e 02 	call	0x45c	; 0x45c <printDirection>
 5a4:	08 95       	ret

000005a6 <initialiseerGeleLed>:
 5a6:	87 b1       	in	r24, 0x07	; 7
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	87 b9       	out	0x07, r24	; 7
 5ac:	08 95       	ret

000005ae <zetGeleLedAan>:
 5ae:	88 b1       	in	r24, 0x08	; 8
 5b0:	80 68       	ori	r24, 0x80	; 128
 5b2:	88 b9       	out	0x08, r24	; 8
 5b4:	08 95       	ret

000005b6 <zetGeleLedUit>:
 5b6:	88 b1       	in	r24, 0x08	; 8
 5b8:	8f 77       	andi	r24, 0x7F	; 127
 5ba:	88 b9       	out	0x08, r24	; 8
 5bc:	08 95       	ret

000005be <init_buttons>:
 5be:	84 b1       	in	r24, 0x04	; 4
 5c0:	87 7f       	andi	r24, 0xF7	; 247
 5c2:	84 b9       	out	0x04, r24	; 4
 5c4:	8a b1       	in	r24, 0x0a	; 10
 5c6:	8f 7d       	andi	r24, 0xDF	; 223
 5c8:	8a b9       	out	0x0a, r24	; 10
 5ca:	08 95       	ret

000005cc <encoder_init>:
 5cc:	8d b1       	in	r24, 0x0d	; 13
 5ce:	8b 7f       	andi	r24, 0xFB	; 251
 5d0:	8d b9       	out	0x0d, r24	; 13
 5d2:	84 b1       	in	r24, 0x04	; 4
 5d4:	8f 7e       	andi	r24, 0xEF	; 239
 5d6:	84 b9       	out	0x04, r24	; 4
 5d8:	8e b1       	in	r24, 0x0e	; 14
 5da:	84 60       	ori	r24, 0x04	; 4
 5dc:	8e b9       	out	0x0e, r24	; 14
 5de:	85 b1       	in	r24, 0x05	; 5
 5e0:	80 61       	ori	r24, 0x10	; 16
 5e2:	85 b9       	out	0x05, r24	; 5
 5e4:	e8 e6       	ldi	r30, 0x68	; 104
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 83       	st	Z, r24
 5ee:	eb e6       	ldi	r30, 0x6B	; 107
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	80 61       	ori	r24, 0x10	; 16
 5f6:	80 83       	st	Z, r24
 5f8:	8c b1       	in	r24, 0x0c	; 12
 5fa:	82 fb       	bst	r24, 2
 5fc:	88 27       	eor	r24, r24
 5fe:	80 f9       	bld	r24, 0
 600:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastLeftB>
 604:	23 b1       	in	r18, 0x03	; 3
 606:	20 71       	andi	r18, 0x10	; 16
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	82 17       	cp	r24, r18
 610:	93 07       	cpc	r25, r19
 612:	09 f4       	brne	.+2      	; 0x616 <encoder_init+0x4a>
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	40 93 60 01 	sts	0x0160, r20	; 0x800160 <__data_end>
 61a:	08 95       	ret

0000061c <PWM_LED_INIT>:
 61c:	87 b1       	in	r24, 0x07	; 7
 61e:	80 64       	ori	r24, 0x40	; 64
 620:	87 b9       	out	0x07, r24	; 7
 622:	83 e8       	ldi	r24, 0x83	; 131
 624:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 628:	88 e0       	ldi	r24, 0x08	; 8
 62a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
 62e:	08 95       	ret

00000630 <PWM_LED_ON>:
}

// Zet de Proximity Led PWM aan
void PWM_LED_ON(uint16_t x){
 630:	9c 01       	movw	r18, r24

DDRC = PROX_LED_PWM;
 632:	80 e4       	ldi	r24, 0x40	; 64
 634:	87 b9       	out	0x07, r24	; 7
PORTC |= PROX_LED_PWM;
 636:	98 b1       	in	r25, 0x08	; 8
 638:	90 64       	ori	r25, 0x40	; 64
 63a:	98 b9       	out	0x08, r25	; 8

TCCR3B |= (1 << CS30);
 63c:	e1 e9       	ldi	r30, 0x91	; 145
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	90 81       	ld	r25, Z
 642:	91 60       	ori	r25, 0x01	; 1
 644:	90 83       	st	Z, r25
OCR3A = x; // tussen 0 en 1023
 646:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 64a:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 64e:	08 95       	ret

00000650 <INIT_FRONT_PROX>:
}

// initialiseer de Proximity Leds aan de voorkant van de Zumo
void INIT_FRONT_PROX() {

DDRF &= ~(FRONT_PROX);
 650:	80 b3       	in	r24, 0x10	; 16
 652:	8d 7f       	andi	r24, 0xFD	; 253
 654:	80 bb       	out	0x10, r24	; 16
PORTF |= FRONT_PROX;
 656:	81 b3       	in	r24, 0x11	; 17
 658:	82 60       	ori	r24, 0x02	; 2
 65a:	81 bb       	out	0x11, r24	; 17
 65c:	08 95       	ret

0000065e <initialisatie>:
#include "sensors.h"


void initialisatie(){
	
	snelheidMotors(snelheid); // snelheid kan tussen 0 en 1023 
 65e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <snelheid>
 662:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <snelheid+0x1>
 666:	0e 94 bc 00 	call	0x178	; 0x178 <snelheidMotors>
 	initialiseerGeleLed();
 66a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <initialiseerGeleLed>
	USART_init(UBRRn);        
 66e:	87 e6       	ldi	r24, 0x67	; 103
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USART_init>
	init_buttons();		
 676:	0e 94 df 02 	call	0x5be	; 0x5be <init_buttons>
	encoder_init();
 67a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <encoder_init>
	initI2C();
 67e:	0e 94 0b 01 	call	0x216	; 0x216 <initI2C>
	PWM_LED_INIT();
 682:	0e 94 0e 03 	call	0x61c	; 0x61c <PWM_LED_INIT>
	INIT_FRONT_PROX();
 686:	0e 94 28 03 	call	0x650	; 0x650 <INIT_FRONT_PROX>
 68a:	08 95       	ret

0000068c <__vector_9>:
1 = langzaam;  2 = middel;  3 = snel;  4 = snelst
i = gele led aan;  o = gele led uit
*/
#include "headers/init.h"

ISR(PCINT0_vect){
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	cf 92       	push	r12
 698:	df 92       	push	r13
 69a:	ef 92       	push	r14
 69c:	ff 92       	push	r15
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31

	bool newLeftB = PINE & LEFT_ENCODER_B;                      // verkrijg de huidige waarde van de linker encoder
 6b6:	2c b1       	in	r18, 0x0c	; 12
 6b8:	22 fb       	bst	r18, 2
 6ba:	22 27       	eor	r18, r18
 6bc:	20 f9       	bld	r18, 0
	bool newLeftA = (PINB & LEFT_ENCODER_XOR) ^ newLeftB;       // bereken de A waarde van de rechter encoder, met de xored waarde
 6be:	83 b1       	in	r24, 0x03	; 3
 6c0:	80 71       	andi	r24, 0x10	; 16
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	62 2f       	mov	r22, r18
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	41 e0       	ldi	r20, 0x01	; 1
 6ca:	86 17       	cp	r24, r22
 6cc:	97 07       	cpc	r25, r23
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <__vector_9+0x46>
 6d0:	40 e0       	ldi	r20, 0x00	; 0

	// xor de newLeftA met de newLeftB en trek de lastLeft A xored met de newLeftB van het resultaat
    // voeg dat resultaat toe aan de countLeft
	countLeft += (newLeftA ^ lastLeftB) - (lastLeftA ^ newLeftB);
 6d2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <lastLeftB>
 6d6:	84 2f       	mov	r24, r20
 6d8:	83 27       	eor	r24, r19
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <__data_end>
 6e0:	62 2f       	mov	r22, r18
 6e2:	65 27       	eor	r22, r21
 6e4:	86 1b       	sub	r24, r22
 6e6:	91 09       	sbc	r25, r1
 6e8:	c0 90 63 01 	lds	r12, 0x0163	; 0x800163 <countLeft>
 6ec:	d0 90 64 01 	lds	r13, 0x0164	; 0x800164 <countLeft+0x1>
 6f0:	e0 90 65 01 	lds	r14, 0x0165	; 0x800165 <countLeft+0x2>
 6f4:	f0 90 66 01 	lds	r15, 0x0166	; 0x800166 <countLeft+0x3>
 6f8:	09 2e       	mov	r0, r25
 6fa:	00 0c       	add	r0, r0
 6fc:	aa 0b       	sbc	r26, r26
 6fe:	bb 0b       	sbc	r27, r27
 700:	8c 0d       	add	r24, r12
 702:	9d 1d       	adc	r25, r13
 704:	ae 1d       	adc	r26, r14
 706:	bf 1d       	adc	r27, r15
 708:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <countLeft>
 70c:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <countLeft+0x1>
 710:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <countLeft+0x2>
 714:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <countLeft+0x3>

	if((lastLeftA ^ newLeftA) & (lastLeftB ^ newLeftB)){
 718:	32 27       	eor	r19, r18
 71a:	45 17       	cp	r20, r21
 71c:	31 f0       	breq	.+12     	; 0x72a <__vector_9+0x9e>
 71e:	33 23       	and	r19, r19
 720:	21 f0       	breq	.+8      	; 0x72a <__vector_9+0x9e>
		errorLeft = true;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <errorLeft>
 728:	02 c0       	rjmp	.+4      	; 0x72e <__vector_9+0xa2>
	}else errorLeft = false;
 72a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <errorLeft>

	// verander de nieuwe waardes in de oude waardes voor de volgende ronde
	lastLeftA = newLeftA;
 72e:	40 93 60 01 	sts	0x0160, r20	; 0x800160 <__data_end>
	lastLeftB = newLeftB;
 732:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <lastLeftB>
    afstand =(countLeft / CPR)* circumference;
 736:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <countLeft>
 73a:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <countLeft+0x1>
 73e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <countLeft+0x2>
 742:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <countLeft+0x3>
 746:	0e 94 49 05 	call	0xa92	; 0xa92 <__floatunsisf>
 74a:	25 e1       	ldi	r18, 0x15	; 21
 74c:	3e e8       	ldi	r19, 0x8E	; 142
 74e:	46 e9       	ldi	r20, 0x96	; 150
 750:	54 e4       	ldi	r21, 0x44	; 68
 752:	0e 94 a8 04 	call	0x950	; 0x950 <__divsf3>
 756:	22 e1       	ldi	r18, 0x12	; 18
 758:	38 e7       	ldi	r19, 0x78	; 120
 75a:	47 eb       	ldi	r20, 0xB7	; 183
 75c:	51 e4       	ldi	r21, 0x41	; 65
 75e:	0e 94 d7 05 	call	0xbae	; 0xbae <__mulsf3>
 762:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fixunssfsi>
 766:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <afstand+0x1>
 76a:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <afstand>
    //printDistance(afstand); 
    
}
 76e:	ff 91       	pop	r31
 770:	ef 91       	pop	r30
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	7f 91       	pop	r23
 77c:	6f 91       	pop	r22
 77e:	5f 91       	pop	r21
 780:	4f 91       	pop	r20
 782:	3f 91       	pop	r19
 784:	2f 91       	pop	r18
 786:	ff 90       	pop	r15
 788:	ef 90       	pop	r14
 78a:	df 90       	pop	r13
 78c:	cf 90       	pop	r12
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <__vector_25>:
/* besturing van de Zumo via toetsenbord */
ISR(USART1_RX_vect)
{
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	2f 93       	push	r18
 7a4:	3f 93       	push	r19
 7a6:	4f 93       	push	r20
 7a8:	5f 93       	push	r21
 7aa:	6f 93       	push	r22
 7ac:	7f 93       	push	r23
 7ae:	8f 93       	push	r24
 7b0:	9f 93       	push	r25
 7b2:	af 93       	push	r26
 7b4:	bf 93       	push	r27
 7b6:	ef 93       	push	r30
 7b8:	ff 93       	push	r31
    char receivedByte;
    // haal de ontvangen waarde op en sla die waarde op in 'receivedByte'
    receivedByte = UDR1;
 7ba:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
           
    switch (receivedByte)
 7be:	8e 2f       	mov	r24, r30
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	fc 01       	movw	r30, r24
 7c4:	f1 97       	sbiw	r30, 0x31	; 49
 7c6:	e7 34       	cpi	r30, 0x47	; 71
 7c8:	f1 05       	cpc	r31, r1
 7ca:	08 f0       	brcs	.+2      	; 0x7ce <__vector_25+0x36>
 7cc:	69 c0       	rjmp	.+210    	; 0x8a0 <__vector_25+0x108>
 7ce:	ea 5a       	subi	r30, 0xAA	; 170
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__tablejump2__>
    {

    // Als I wordt ingedrukt op het toetsenbord gaat het gele led aan
    case 'I':              
    case 'i':
        zetGeleLedAan();
 7d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <zetGeleLedAan>
        break;
 7da:	64 c0       	rjmp	.+200    	; 0x8a4 <__vector_25+0x10c>

    // Als O wordt ingedrukt op het toetsenbord gaat het gele led uit
    case 'O':            
    case 'o':
        zetGeleLedUit();
 7dc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <zetGeleLedUit>
        break;
 7e0:	61 c0       	rjmp	.+194    	; 0x8a4 <__vector_25+0x10c>

    // Als 1 wordt ingedrukt op het toetsenbord gaat de Zumo op de snelheid "langzaam" rijden
    case '1':
        snelheid = langzaam;
 7e2:	88 ec       	ldi	r24, 0xC8	; 200
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <snelheid+0x1>
 7ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <snelheid>
        zetMotorsAan();
 7ee:	0e 94 cd 00 	call	0x19a	; 0x19a <zetMotorsAan>
        break;
 7f2:	58 c0       	rjmp	.+176    	; 0x8a4 <__vector_25+0x10c>

    // Als 2 wordt ingedrukt op het toetsenbord gaat de Zumo op de snelheid "middel" rijden
    case '2':
        snelheid = middel;
 7f4:	84 ef       	ldi	r24, 0xF4	; 244
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <snelheid+0x1>
 7fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <snelheid>
        zetMotorsAan();
 800:	0e 94 cd 00 	call	0x19a	; 0x19a <zetMotorsAan>
        break;
 804:	4f c0       	rjmp	.+158    	; 0x8a4 <__vector_25+0x10c>

    // Als 3 wordt ingedrukt op het toetsenbord gaat de Zumo op de snelheid "snel" rijden
    case '3':
        snelheid = snel;
 806:	80 e2       	ldi	r24, 0x20	; 32
 808:	93 e0       	ldi	r25, 0x03	; 3
 80a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <snelheid+0x1>
 80e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <snelheid>
        zetMotorsAan();
 812:	0e 94 cd 00 	call	0x19a	; 0x19a <zetMotorsAan>
        break;
 816:	46 c0       	rjmp	.+140    	; 0x8a4 <__vector_25+0x10c>

    // Als 4 wordt ingedrukt op het toetsenbord gaat de Zumo op de snelheid "snelst" rijden
    case '4':
        snelheid = snelst;
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	93 e0       	ldi	r25, 0x03	; 3
 81c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <snelheid+0x1>
 820:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <snelheid>
        zetMotorsAan();
 824:	0e 94 cd 00 	call	0x19a	; 0x19a <zetMotorsAan>
        break;
 828:	3d c0       	rjmp	.+122    	; 0x8a4 <__vector_25+0x10c>
  
    // Als W wordt ingedrukt op het toetsenbord gaat de Zumo vooruit rijden
    case 'W':        
    case 'w':
        richtingMotors(vooruit);
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <richtingMotors>
        break;
 830:	39 c0       	rjmp	.+114    	; 0x8a4 <__vector_25+0x10c>

    // Als A wordt ingedrukt op het toetsenbord gaat de Zumo naar links draaien
    case 'A': 
    case 'a':
        LeftRight(links);
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LeftRight>
        break;
 838:	35 c0       	rjmp	.+106    	; 0x8a4 <__vector_25+0x10c>

    // Als H wordt ingedrukt gaat de Zumo naar links draaien (flauwe bocht)
    case 'H': 
    case 'h':
        OCR1A = snelheid;
 83a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <snelheid>
 83e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <snelheid+0x1>
 842:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 846:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
        OCR1B = snelheid - 300;
 84a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <snelheid>
 84e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <snelheid+0x1>
 852:	8c 52       	subi	r24, 0x2C	; 44
 854:	91 40       	sbci	r25, 0x01	; 1
 856:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 85a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
        break;
 85e:	22 c0       	rjmp	.+68     	; 0x8a4 <__vector_25+0x10c>

    // Als S wordt ingedrukt op het toetsenbord gaat de Zumo achteruit rijden        
    case 'S':             
    case 's':
        richtingMotors(achteruit);
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <richtingMotors>
        break;
 866:	1e c0       	rjmp	.+60     	; 0x8a4 <__vector_25+0x10c>

    // Als D wordt ingedrukt op het toetsenbord gaat de Zumo naar rechts draaien        
    case 'D': 
    case 'd':
        LeftRight(rechts);
 868:	83 e0       	ldi	r24, 0x03	; 3
 86a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LeftRight>
        break;
 86e:	1a c0       	rjmp	.+52     	; 0x8a4 <__vector_25+0x10c>
    
    case 'K': 
    case 'k':
        OCR1A = snelheid- 300;
 870:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <snelheid>
 874:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <snelheid+0x1>
 878:	8c 52       	subi	r24, 0x2C	; 44
 87a:	91 40       	sbci	r25, 0x01	; 1
 87c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 880:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
        OCR1B = snelheid;
 884:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <snelheid>
 888:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <snelheid+0x1>
 88c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 890:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
        break;
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <__vector_25+0x10c>

    
    // Als T wordt ingedrukt laat de Zumo "ToetToet" zien
    case 'T':
    case 't':
        writeString("ToetToet\n\r");
 896:	84 e5       	ldi	r24, 0x54	; 84
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeString>
        break;
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__vector_25+0x10c>
    
    // Als je op een niet hierboven gedefinde knop druk dan gaat de motor uit
    default:
        zetMotorsUit();
 8a0:	0e 94 de 00 	call	0x1bc	; 0x1bc <zetMotorsUit>
        break;
    }

     
}
 8a4:	ff 91       	pop	r31
 8a6:	ef 91       	pop	r30
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	9f 91       	pop	r25
 8ae:	8f 91       	pop	r24
 8b0:	7f 91       	pop	r23
 8b2:	6f 91       	pop	r22
 8b4:	5f 91       	pop	r21
 8b6:	4f 91       	pop	r20
 8b8:	3f 91       	pop	r19
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <main>:


int main(void)
{
    initialisatie();  
 8c6:	0e 94 2f 03 	call	0x65e	; 0x65e <initialisatie>
    zetMotorsUit();  
 8ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <zetMotorsUit>
    afstand = (countLeft / CPR)* circumference;
 8ce:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <countLeft>
 8d2:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <countLeft+0x1>
 8d6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <countLeft+0x2>
 8da:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <countLeft+0x3>
 8de:	0e 94 49 05 	call	0xa92	; 0xa92 <__floatunsisf>
 8e2:	25 e1       	ldi	r18, 0x15	; 21
 8e4:	3e e8       	ldi	r19, 0x8E	; 142
 8e6:	46 e9       	ldi	r20, 0x96	; 150
 8e8:	54 e4       	ldi	r21, 0x44	; 68
 8ea:	0e 94 a8 04 	call	0x950	; 0x950 <__divsf3>
 8ee:	22 e1       	ldi	r18, 0x12	; 18
 8f0:	38 e7       	ldi	r19, 0x78	; 120
 8f2:	47 eb       	ldi	r20, 0xB7	; 183
 8f4:	51 e4       	ldi	r21, 0x41	; 65
 8f6:	0e 94 d7 05 	call	0xbae	; 0xbae <__mulsf3>
 8fa:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fixunssfsi>
 8fe:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <afstand+0x1>
 902:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <afstand>
    sei();
 906:	78 94       	sei
    
    while (1)
        {
        PWM_LED_ON(60);             // zet de sterkte van de PWM led
 908:	8c e3       	ldi	r24, 0x3C	; 60
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 18 03 	call	0x630	; 0x630 <PWM_LED_ON>
        if (~PINF & FRONT_PROX)     //  wacht tot de Front_prox iets ziet
 910:	79 99       	sbic	0x0f, 1	; 15
 912:	0e c0       	rjmp	.+28     	; 0x930 <main+0x6a>
        {
            richtingMotors(achteruit);
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <richtingMotors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 91a:	2f ef       	ldi	r18, 0xFF	; 255
 91c:	87 ea       	ldi	r24, 0xA7	; 167
 91e:	91 e6       	ldi	r25, 0x61	; 97
 920:	21 50       	subi	r18, 0x01	; 1
 922:	80 40       	sbci	r24, 0x00	; 0
 924:	90 40       	sbci	r25, 0x00	; 0
 926:	e1 f7       	brne	.-8      	; 0x920 <main+0x5a>
 928:	00 c0       	rjmp	.+0      	; 0x92a <main+0x64>
 92a:	00 00       	nop
            _delay_ms(2000);
            zetMotorsUit();
 92c:	0e 94 de 00 	call	0x1bc	; 0x1bc <zetMotorsUit>
 930:	2f ef       	ldi	r18, 0xFF	; 255
 932:	83 ed       	ldi	r24, 0xD3	; 211
 934:	90 e3       	ldi	r25, 0x30	; 48
 936:	21 50       	subi	r18, 0x01	; 1
 938:	80 40       	sbci	r24, 0x00	; 0
 93a:	90 40       	sbci	r25, 0x00	; 0
 93c:	e1 f7       	brne	.-8      	; 0x936 <main+0x70>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <main+0x7a>
 940:	00 00       	nop
        }
        // laat de interrupt zijn werk doen  
        _delay_ms(1000);
        printAll(afstand);
 942:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <afstand>
 946:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <afstand+0x1>
 94a:	0e 94 ce 02 	call	0x59c	; 0x59c <printAll>
    }
 94e:	dc cf       	rjmp	.-72     	; 0x908 <main+0x42>

00000950 <__divsf3>:
 950:	0e 94 bc 04 	call	0x978	; 0x978 <__divsf3x>
 954:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_round>
 958:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fp_pscB>
 95c:	58 f0       	brcs	.+22     	; 0x974 <__divsf3+0x24>
 95e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_pscA>
 962:	40 f0       	brcs	.+16     	; 0x974 <__divsf3+0x24>
 964:	29 f4       	brne	.+10     	; 0x970 <__divsf3+0x20>
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	29 f0       	breq	.+10     	; 0x974 <__divsf3+0x24>
 96a:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 96e:	51 11       	cpse	r21, r1
 970:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_szero>
 974:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_nan>

00000978 <__divsf3x>:
 978:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_split3>
 97c:	68 f3       	brcs	.-38     	; 0x958 <__divsf3+0x8>

0000097e <__divsf3_pse>:
 97e:	99 23       	and	r25, r25
 980:	b1 f3       	breq	.-20     	; 0x96e <__divsf3+0x1e>
 982:	55 23       	and	r21, r21
 984:	91 f3       	breq	.-28     	; 0x96a <__divsf3+0x1a>
 986:	95 1b       	sub	r25, r21
 988:	55 0b       	sbc	r21, r21
 98a:	bb 27       	eor	r27, r27
 98c:	aa 27       	eor	r26, r26
 98e:	62 17       	cp	r22, r18
 990:	73 07       	cpc	r23, r19
 992:	84 07       	cpc	r24, r20
 994:	38 f0       	brcs	.+14     	; 0x9a4 <__divsf3_pse+0x26>
 996:	9f 5f       	subi	r25, 0xFF	; 255
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	22 0f       	add	r18, r18
 99c:	33 1f       	adc	r19, r19
 99e:	44 1f       	adc	r20, r20
 9a0:	aa 1f       	adc	r26, r26
 9a2:	a9 f3       	breq	.-22     	; 0x98e <__divsf3_pse+0x10>
 9a4:	35 d0       	rcall	.+106    	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
 9a6:	0e 2e       	mov	r0, r30
 9a8:	3a f0       	brmi	.+14     	; 0x9b8 <__divsf3_pse+0x3a>
 9aa:	e0 e8       	ldi	r30, 0x80	; 128
 9ac:	32 d0       	rcall	.+100    	; 0xa12 <__DATA_REGION_LENGTH__+0x12>
 9ae:	91 50       	subi	r25, 0x01	; 1
 9b0:	50 40       	sbci	r21, 0x00	; 0
 9b2:	e6 95       	lsr	r30
 9b4:	00 1c       	adc	r0, r0
 9b6:	ca f7       	brpl	.-14     	; 0x9aa <__divsf3_pse+0x2c>
 9b8:	2b d0       	rcall	.+86     	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
 9ba:	fe 2f       	mov	r31, r30
 9bc:	29 d0       	rcall	.+82     	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
 9be:	66 0f       	add	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	bb 1f       	adc	r27, r27
 9c6:	26 17       	cp	r18, r22
 9c8:	37 07       	cpc	r19, r23
 9ca:	48 07       	cpc	r20, r24
 9cc:	ab 07       	cpc	r26, r27
 9ce:	b0 e8       	ldi	r27, 0x80	; 128
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <__divsf3_pse+0x56>
 9d2:	bb 0b       	sbc	r27, r27
 9d4:	80 2d       	mov	r24, r0
 9d6:	bf 01       	movw	r22, r30
 9d8:	ff 27       	eor	r31, r31
 9da:	93 58       	subi	r25, 0x83	; 131
 9dc:	5f 4f       	sbci	r21, 0xFF	; 255
 9de:	3a f0       	brmi	.+14     	; 0x9ee <__divsf3_pse+0x70>
 9e0:	9e 3f       	cpi	r25, 0xFE	; 254
 9e2:	51 05       	cpc	r21, r1
 9e4:	78 f0       	brcs	.+30     	; 0xa04 <__DATA_REGION_LENGTH__+0x4>
 9e6:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 9ea:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_szero>
 9ee:	5f 3f       	cpi	r21, 0xFF	; 255
 9f0:	e4 f3       	brlt	.-8      	; 0x9ea <__divsf3_pse+0x6c>
 9f2:	98 3e       	cpi	r25, 0xE8	; 232
 9f4:	d4 f3       	brlt	.-12     	; 0x9ea <__divsf3_pse+0x6c>
 9f6:	86 95       	lsr	r24
 9f8:	77 95       	ror	r23
 9fa:	67 95       	ror	r22
 9fc:	b7 95       	ror	r27
 9fe:	f7 95       	ror	r31
 a00:	9f 5f       	subi	r25, 0xFF	; 255
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__divsf3_pse+0x78>
 a04:	88 0f       	add	r24, r24
 a06:	91 1d       	adc	r25, r1
 a08:	96 95       	lsr	r25
 a0a:	87 95       	ror	r24
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret
 a10:	e1 e0       	ldi	r30, 0x01	; 1
 a12:	66 0f       	add	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	bb 1f       	adc	r27, r27
 a1a:	62 17       	cp	r22, r18
 a1c:	73 07       	cpc	r23, r19
 a1e:	84 07       	cpc	r24, r20
 a20:	ba 07       	cpc	r27, r26
 a22:	20 f0       	brcs	.+8      	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 a24:	62 1b       	sub	r22, r18
 a26:	73 0b       	sbc	r23, r19
 a28:	84 0b       	sbc	r24, r20
 a2a:	ba 0b       	sbc	r27, r26
 a2c:	ee 1f       	adc	r30, r30
 a2e:	88 f7       	brcc	.-30     	; 0xa12 <__DATA_REGION_LENGTH__+0x12>
 a30:	e0 95       	com	r30
 a32:	08 95       	ret

00000a34 <__fixunssfsi>:
 a34:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_splitA>
 a38:	88 f0       	brcs	.+34     	; 0xa5c <__fixunssfsi+0x28>
 a3a:	9f 57       	subi	r25, 0x7F	; 127
 a3c:	98 f0       	brcs	.+38     	; 0xa64 <__fixunssfsi+0x30>
 a3e:	b9 2f       	mov	r27, r25
 a40:	99 27       	eor	r25, r25
 a42:	b7 51       	subi	r27, 0x17	; 23
 a44:	b0 f0       	brcs	.+44     	; 0xa72 <__fixunssfsi+0x3e>
 a46:	e1 f0       	breq	.+56     	; 0xa80 <__fixunssfsi+0x4c>
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	1a f0       	brmi	.+6      	; 0xa58 <__fixunssfsi+0x24>
 a52:	ba 95       	dec	r27
 a54:	c9 f7       	brne	.-14     	; 0xa48 <__fixunssfsi+0x14>
 a56:	14 c0       	rjmp	.+40     	; 0xa80 <__fixunssfsi+0x4c>
 a58:	b1 30       	cpi	r27, 0x01	; 1
 a5a:	91 f0       	breq	.+36     	; 0xa80 <__fixunssfsi+0x4c>
 a5c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_zero>
 a60:	b1 e0       	ldi	r27, 0x01	; 1
 a62:	08 95       	ret
 a64:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_zero>
 a68:	67 2f       	mov	r22, r23
 a6a:	78 2f       	mov	r23, r24
 a6c:	88 27       	eor	r24, r24
 a6e:	b8 5f       	subi	r27, 0xF8	; 248
 a70:	39 f0       	breq	.+14     	; 0xa80 <__fixunssfsi+0x4c>
 a72:	b9 3f       	cpi	r27, 0xF9	; 249
 a74:	cc f3       	brlt	.-14     	; 0xa68 <__fixunssfsi+0x34>
 a76:	86 95       	lsr	r24
 a78:	77 95       	ror	r23
 a7a:	67 95       	ror	r22
 a7c:	b3 95       	inc	r27
 a7e:	d9 f7       	brne	.-10     	; 0xa76 <__fixunssfsi+0x42>
 a80:	3e f4       	brtc	.+14     	; 0xa90 <__fixunssfsi+0x5c>
 a82:	90 95       	com	r25
 a84:	80 95       	com	r24
 a86:	70 95       	com	r23
 a88:	61 95       	neg	r22
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	8f 4f       	sbci	r24, 0xFF	; 255
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	08 95       	ret

00000a92 <__floatunsisf>:
 a92:	e8 94       	clt
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__floatsisf+0x12>

00000a96 <__floatsisf>:
 a96:	97 fb       	bst	r25, 7
 a98:	3e f4       	brtc	.+14     	; 0xaa8 <__floatsisf+0x12>
 a9a:	90 95       	com	r25
 a9c:	80 95       	com	r24
 a9e:	70 95       	com	r23
 aa0:	61 95       	neg	r22
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	99 23       	and	r25, r25
 aaa:	a9 f0       	breq	.+42     	; 0xad6 <__floatsisf+0x40>
 aac:	f9 2f       	mov	r31, r25
 aae:	96 e9       	ldi	r25, 0x96	; 150
 ab0:	bb 27       	eor	r27, r27
 ab2:	93 95       	inc	r25
 ab4:	f6 95       	lsr	r31
 ab6:	87 95       	ror	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b7 95       	ror	r27
 abe:	f1 11       	cpse	r31, r1
 ac0:	f8 cf       	rjmp	.-16     	; 0xab2 <__floatsisf+0x1c>
 ac2:	fa f4       	brpl	.+62     	; 0xb02 <__stack+0x3>
 ac4:	bb 0f       	add	r27, r27
 ac6:	11 f4       	brne	.+4      	; 0xacc <__floatsisf+0x36>
 ac8:	60 ff       	sbrs	r22, 0
 aca:	1b c0       	rjmp	.+54     	; 0xb02 <__stack+0x3>
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	16 c0       	rjmp	.+44     	; 0xb02 <__stack+0x3>
 ad6:	88 23       	and	r24, r24
 ad8:	11 f0       	breq	.+4      	; 0xade <__floatsisf+0x48>
 ada:	96 e9       	ldi	r25, 0x96	; 150
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <__stack+0x1>
 ade:	77 23       	and	r23, r23
 ae0:	21 f0       	breq	.+8      	; 0xaea <__floatsisf+0x54>
 ae2:	9e e8       	ldi	r25, 0x8E	; 142
 ae4:	87 2f       	mov	r24, r23
 ae6:	76 2f       	mov	r23, r22
 ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <__floatsisf+0x5e>
 aea:	66 23       	and	r22, r22
 aec:	71 f0       	breq	.+28     	; 0xb0a <__stack+0xb>
 aee:	96 e8       	ldi	r25, 0x86	; 134
 af0:	86 2f       	mov	r24, r22
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	60 e0       	ldi	r22, 0x00	; 0
 af6:	2a f0       	brmi	.+10     	; 0xb02 <__stack+0x3>
 af8:	9a 95       	dec	r25
 afa:	66 0f       	add	r22, r22
 afc:	77 1f       	adc	r23, r23
 afe:	88 1f       	adc	r24, r24
 b00:	da f7       	brpl	.-10     	; 0xaf8 <__floatsisf+0x62>
 b02:	88 0f       	add	r24, r24
 b04:	96 95       	lsr	r25
 b06:	87 95       	ror	r24
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret

00000b0c <__fp_inf>:
 b0c:	97 f9       	bld	r25, 7
 b0e:	9f 67       	ori	r25, 0x7F	; 127
 b10:	80 e8       	ldi	r24, 0x80	; 128
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	60 e0       	ldi	r22, 0x00	; 0
 b16:	08 95       	ret

00000b18 <__fp_nan>:
 b18:	9f ef       	ldi	r25, 0xFF	; 255
 b1a:	80 ec       	ldi	r24, 0xC0	; 192
 b1c:	08 95       	ret

00000b1e <__fp_pscA>:
 b1e:	00 24       	eor	r0, r0
 b20:	0a 94       	dec	r0
 b22:	16 16       	cp	r1, r22
 b24:	17 06       	cpc	r1, r23
 b26:	18 06       	cpc	r1, r24
 b28:	09 06       	cpc	r0, r25
 b2a:	08 95       	ret

00000b2c <__fp_pscB>:
 b2c:	00 24       	eor	r0, r0
 b2e:	0a 94       	dec	r0
 b30:	12 16       	cp	r1, r18
 b32:	13 06       	cpc	r1, r19
 b34:	14 06       	cpc	r1, r20
 b36:	05 06       	cpc	r0, r21
 b38:	08 95       	ret

00000b3a <__fp_round>:
 b3a:	09 2e       	mov	r0, r25
 b3c:	03 94       	inc	r0
 b3e:	00 0c       	add	r0, r0
 b40:	11 f4       	brne	.+4      	; 0xb46 <__fp_round+0xc>
 b42:	88 23       	and	r24, r24
 b44:	52 f0       	brmi	.+20     	; 0xb5a <__fp_round+0x20>
 b46:	bb 0f       	add	r27, r27
 b48:	40 f4       	brcc	.+16     	; 0xb5a <__fp_round+0x20>
 b4a:	bf 2b       	or	r27, r31
 b4c:	11 f4       	brne	.+4      	; 0xb52 <__fp_round+0x18>
 b4e:	60 ff       	sbrs	r22, 0
 b50:	04 c0       	rjmp	.+8      	; 0xb5a <__fp_round+0x20>
 b52:	6f 5f       	subi	r22, 0xFF	; 255
 b54:	7f 4f       	sbci	r23, 0xFF	; 255
 b56:	8f 4f       	sbci	r24, 0xFF	; 255
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	08 95       	ret

00000b5c <__fp_split3>:
 b5c:	57 fd       	sbrc	r21, 7
 b5e:	90 58       	subi	r25, 0x80	; 128
 b60:	44 0f       	add	r20, r20
 b62:	55 1f       	adc	r21, r21
 b64:	59 f0       	breq	.+22     	; 0xb7c <__fp_splitA+0x10>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	71 f0       	breq	.+28     	; 0xb86 <__fp_splitA+0x1a>
 b6a:	47 95       	ror	r20

00000b6c <__fp_splitA>:
 b6c:	88 0f       	add	r24, r24
 b6e:	97 fb       	bst	r25, 7
 b70:	99 1f       	adc	r25, r25
 b72:	61 f0       	breq	.+24     	; 0xb8c <__fp_splitA+0x20>
 b74:	9f 3f       	cpi	r25, 0xFF	; 255
 b76:	79 f0       	breq	.+30     	; 0xb96 <__fp_splitA+0x2a>
 b78:	87 95       	ror	r24
 b7a:	08 95       	ret
 b7c:	12 16       	cp	r1, r18
 b7e:	13 06       	cpc	r1, r19
 b80:	14 06       	cpc	r1, r20
 b82:	55 1f       	adc	r21, r21
 b84:	f2 cf       	rjmp	.-28     	; 0xb6a <__fp_split3+0xe>
 b86:	46 95       	lsr	r20
 b88:	f1 df       	rcall	.-30     	; 0xb6c <__fp_splitA>
 b8a:	08 c0       	rjmp	.+16     	; 0xb9c <__fp_splitA+0x30>
 b8c:	16 16       	cp	r1, r22
 b8e:	17 06       	cpc	r1, r23
 b90:	18 06       	cpc	r1, r24
 b92:	99 1f       	adc	r25, r25
 b94:	f1 cf       	rjmp	.-30     	; 0xb78 <__fp_splitA+0xc>
 b96:	86 95       	lsr	r24
 b98:	71 05       	cpc	r23, r1
 b9a:	61 05       	cpc	r22, r1
 b9c:	08 94       	sec
 b9e:	08 95       	ret

00000ba0 <__fp_zero>:
 ba0:	e8 94       	clt

00000ba2 <__fp_szero>:
 ba2:	bb 27       	eor	r27, r27
 ba4:	66 27       	eor	r22, r22
 ba6:	77 27       	eor	r23, r23
 ba8:	cb 01       	movw	r24, r22
 baa:	97 f9       	bld	r25, 7
 bac:	08 95       	ret

00000bae <__mulsf3>:
 bae:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__mulsf3x>
 bb2:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__fp_round>
 bb6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_pscA>
 bba:	38 f0       	brcs	.+14     	; 0xbca <__mulsf3+0x1c>
 bbc:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fp_pscB>
 bc0:	20 f0       	brcs	.+8      	; 0xbca <__mulsf3+0x1c>
 bc2:	95 23       	and	r25, r21
 bc4:	11 f0       	breq	.+4      	; 0xbca <__mulsf3+0x1c>
 bc6:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 bca:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_nan>
 bce:	11 24       	eor	r1, r1
 bd0:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_szero>

00000bd4 <__mulsf3x>:
 bd4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_split3>
 bd8:	70 f3       	brcs	.-36     	; 0xbb6 <__mulsf3+0x8>

00000bda <__mulsf3_pse>:
 bda:	95 9f       	mul	r25, r21
 bdc:	c1 f3       	breq	.-16     	; 0xbce <__mulsf3+0x20>
 bde:	95 0f       	add	r25, r21
 be0:	50 e0       	ldi	r21, 0x00	; 0
 be2:	55 1f       	adc	r21, r21
 be4:	62 9f       	mul	r22, r18
 be6:	f0 01       	movw	r30, r0
 be8:	72 9f       	mul	r23, r18
 bea:	bb 27       	eor	r27, r27
 bec:	f0 0d       	add	r31, r0
 bee:	b1 1d       	adc	r27, r1
 bf0:	63 9f       	mul	r22, r19
 bf2:	aa 27       	eor	r26, r26
 bf4:	f0 0d       	add	r31, r0
 bf6:	b1 1d       	adc	r27, r1
 bf8:	aa 1f       	adc	r26, r26
 bfa:	64 9f       	mul	r22, r20
 bfc:	66 27       	eor	r22, r22
 bfe:	b0 0d       	add	r27, r0
 c00:	a1 1d       	adc	r26, r1
 c02:	66 1f       	adc	r22, r22
 c04:	82 9f       	mul	r24, r18
 c06:	22 27       	eor	r18, r18
 c08:	b0 0d       	add	r27, r0
 c0a:	a1 1d       	adc	r26, r1
 c0c:	62 1f       	adc	r22, r18
 c0e:	73 9f       	mul	r23, r19
 c10:	b0 0d       	add	r27, r0
 c12:	a1 1d       	adc	r26, r1
 c14:	62 1f       	adc	r22, r18
 c16:	83 9f       	mul	r24, r19
 c18:	a0 0d       	add	r26, r0
 c1a:	61 1d       	adc	r22, r1
 c1c:	22 1f       	adc	r18, r18
 c1e:	74 9f       	mul	r23, r20
 c20:	33 27       	eor	r19, r19
 c22:	a0 0d       	add	r26, r0
 c24:	61 1d       	adc	r22, r1
 c26:	23 1f       	adc	r18, r19
 c28:	84 9f       	mul	r24, r20
 c2a:	60 0d       	add	r22, r0
 c2c:	21 1d       	adc	r18, r1
 c2e:	82 2f       	mov	r24, r18
 c30:	76 2f       	mov	r23, r22
 c32:	6a 2f       	mov	r22, r26
 c34:	11 24       	eor	r1, r1
 c36:	9f 57       	subi	r25, 0x7F	; 127
 c38:	50 40       	sbci	r21, 0x00	; 0
 c3a:	9a f0       	brmi	.+38     	; 0xc62 <__mulsf3_pse+0x88>
 c3c:	f1 f0       	breq	.+60     	; 0xc7a <__mulsf3_pse+0xa0>
 c3e:	88 23       	and	r24, r24
 c40:	4a f0       	brmi	.+18     	; 0xc54 <__mulsf3_pse+0x7a>
 c42:	ee 0f       	add	r30, r30
 c44:	ff 1f       	adc	r31, r31
 c46:	bb 1f       	adc	r27, r27
 c48:	66 1f       	adc	r22, r22
 c4a:	77 1f       	adc	r23, r23
 c4c:	88 1f       	adc	r24, r24
 c4e:	91 50       	subi	r25, 0x01	; 1
 c50:	50 40       	sbci	r21, 0x00	; 0
 c52:	a9 f7       	brne	.-22     	; 0xc3e <__mulsf3_pse+0x64>
 c54:	9e 3f       	cpi	r25, 0xFE	; 254
 c56:	51 05       	cpc	r21, r1
 c58:	80 f0       	brcs	.+32     	; 0xc7a <__mulsf3_pse+0xa0>
 c5a:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 c5e:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_szero>
 c62:	5f 3f       	cpi	r21, 0xFF	; 255
 c64:	e4 f3       	brlt	.-8      	; 0xc5e <__mulsf3_pse+0x84>
 c66:	98 3e       	cpi	r25, 0xE8	; 232
 c68:	d4 f3       	brlt	.-12     	; 0xc5e <__mulsf3_pse+0x84>
 c6a:	86 95       	lsr	r24
 c6c:	77 95       	ror	r23
 c6e:	67 95       	ror	r22
 c70:	b7 95       	ror	r27
 c72:	f7 95       	ror	r31
 c74:	e7 95       	ror	r30
 c76:	9f 5f       	subi	r25, 0xFF	; 255
 c78:	c1 f7       	brne	.-16     	; 0xc6a <__mulsf3_pse+0x90>
 c7a:	fe 2b       	or	r31, r30
 c7c:	88 0f       	add	r24, r24
 c7e:	91 1d       	adc	r25, r1
 c80:	96 95       	lsr	r25
 c82:	87 95       	ror	r24
 c84:	97 f9       	bld	r25, 7
 c86:	08 95       	ret

00000c88 <__udivmodhi4>:
 c88:	aa 1b       	sub	r26, r26
 c8a:	bb 1b       	sub	r27, r27
 c8c:	51 e1       	ldi	r21, 0x11	; 17
 c8e:	07 c0       	rjmp	.+14     	; 0xc9e <__udivmodhi4_ep>

00000c90 <__udivmodhi4_loop>:
 c90:	aa 1f       	adc	r26, r26
 c92:	bb 1f       	adc	r27, r27
 c94:	a6 17       	cp	r26, r22
 c96:	b7 07       	cpc	r27, r23
 c98:	10 f0       	brcs	.+4      	; 0xc9e <__udivmodhi4_ep>
 c9a:	a6 1b       	sub	r26, r22
 c9c:	b7 0b       	sbc	r27, r23

00000c9e <__udivmodhi4_ep>:
 c9e:	88 1f       	adc	r24, r24
 ca0:	99 1f       	adc	r25, r25
 ca2:	5a 95       	dec	r21
 ca4:	a9 f7       	brne	.-22     	; 0xc90 <__udivmodhi4_loop>
 ca6:	80 95       	com	r24
 ca8:	90 95       	com	r25
 caa:	bc 01       	movw	r22, r24
 cac:	cd 01       	movw	r24, r26
 cae:	08 95       	ret

00000cb0 <__tablejump2__>:
 cb0:	ee 0f       	add	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	05 90       	lpm	r0, Z+
 cb6:	f4 91       	lpm	r31, Z
 cb8:	e0 2d       	mov	r30, r0
 cba:	09 94       	ijmp

00000cbc <__umulhisi3>:
 cbc:	a2 9f       	mul	r26, r18
 cbe:	b0 01       	movw	r22, r0
 cc0:	b3 9f       	mul	r27, r19
 cc2:	c0 01       	movw	r24, r0
 cc4:	a3 9f       	mul	r26, r19
 cc6:	70 0d       	add	r23, r0
 cc8:	81 1d       	adc	r24, r1
 cca:	11 24       	eor	r1, r1
 ccc:	91 1d       	adc	r25, r1
 cce:	b2 9f       	mul	r27, r18
 cd0:	70 0d       	add	r23, r0
 cd2:	81 1d       	adc	r24, r1
 cd4:	11 24       	eor	r1, r1
 cd6:	91 1d       	adc	r25, r1
 cd8:	08 95       	ret

00000cda <_exit>:
 cda:	f8 94       	cli

00000cdc <__stop_program>:
 cdc:	ff cf       	rjmp	.-2      	; 0xcdc <__stop_program>
